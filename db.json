{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/categories.styl","path":"css/components/categories.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/tags.styl","path":"css/components/tags.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/decode-message.md","hash":"35e1ebfb395b2b187df60743ac7ee4ef2eeb9f6a","modified":1712482058122},{"_id":"source/_posts/detect-data-type.md","hash":"2cf7e5503204b124d6c4a0a373f66458898b55f4","modified":1712647959688},{"_id":"source/_posts/this.md","hash":"8271fd77c25e913c252c962033193ce6cde46263","modified":1712733930572},{"_id":"themes/Hacker/.gitignore","hash":"c57cf4e0d24c5db09716f924a45ad879650f7548","modified":1662453582000},{"_id":"themes/Hacker/CHANGELOG_zh-CN.md","hash":"5055c0a138469e673b3136c60033c5ae30a32787","modified":1662453582000},{"_id":"themes/Hacker/LICENSE","hash":"3127907a7623734f830e8c69ccee03b693bf993e","modified":1662453582000},{"_id":"themes/Hacker/CHANGELOG.md","hash":"5ee7ae48cc5308758894eb961caaef89ecc04048","modified":1662453582000},{"_id":"themes/Hacker/README.md","hash":"18d28d5466f58f275e0aec504748bbe50f4c62f5","modified":1662453582000},{"_id":"themes/Hacker/README_zh-CN.md","hash":"4fb25729cfb2e6a5727977dd9c2cdb566f839ac1","modified":1662453582000},{"_id":"themes/Hacker/_config.example.yml","hash":"3ab868ce866337f62208878941daccf35583c49b","modified":1712716396280},{"_id":"themes/Hacker/_config.yml","hash":"94b3cefc3bf08ac255a6c98a1a00a9f29253cb2d","modified":1712716701945},{"_id":"themes/Hacker/languages/default.yml","hash":"d4466fb0a6102e50777ee56957f78de696891a0e","modified":1662453582000},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"d822b531c8e0edd5e1ae85ac3de96017e4781b3f","modified":1662453582000},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1662453582000},{"_id":"themes/Hacker/layout/categories.ejs","hash":"bfad4e7eade650c535f0194974e2646619657b8b","modified":1662453582000},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1662453582000},{"_id":"themes/Hacker/layout/layout.ejs","hash":"1bd1ff49fb17548b934e0664ba6cefd60b086fa9","modified":1662453582000},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/tags.ejs","hash":"ee89e6a9c14bdb5e5e8cf975a558c780fe8dabff","modified":1662453582000},{"_id":"themes/Hacker/source/css/style.styl","hash":"208e5f6d010e4e2c5590dae5e4fca8de592d3ef1","modified":1662453582000},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1662453582000},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"1f79ebaf52b8229cf5c58bb8325cf0177859a05c","modified":1662453582000},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"06dd5da86efddecedd26a998fa66c53c580867f0","modified":1662453582000},{"_id":"themes/Hacker/layout/components/baiduanalytics.ejs","hash":"75ea315908beaf390265e00167cf8a30b5d0d94a","modified":1662453582000},{"_id":"themes/Hacker/layout/components/categories.ejs","hash":"3665bf5d1c7181db22dc1c48d62ebf42757d8c27","modified":1662453582000},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"d1fffabbca58cbeb0ff33855fd1b7ea6079e82b3","modified":1662453582000},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"f730808edeb1d31ed116b4b0cf6721491d6720b2","modified":1712477522156},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"27e6906523eae89fed4a6e86ebb2ad614a25c647","modified":1662453582000},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1662453582000},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"929a8eafa278d49c2f41d3581e2608eca80d7856","modified":1662453582000},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1662453582000},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"3ebb7790a46587297966f200fb4fcdbba25269df","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"f613fc6ed4dec8171bf7a03bd8878eaa995082bb","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/categories.styl","hash":"c67e20d60351295cb178b568af42d430f4bcc3e6","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"80ef890252d31d3bbfe71740fdcfc54ae14cad8e","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"fa5e6d715d288a327406df78225284c70530cb98","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"9c6e6bc00f377666f6815bc5e23438893357f8f6","modified":1712715267325},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"1cec6cb1835f99432cc5c6ba674782237fea4f95","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"8c0d919322194dc295e5404bcd68949f962f88dc","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/tags.styl","hash":"684cf4eb4b8671476365e955dceebf096cc0e6ed","modified":1662453582000},{"_id":"public/2024/04/09/this/index.html","hash":"ae5b36fcc9e3b2a542e8b4112a0811d6c4937ed6","modified":1712734369769},{"_id":"public/2024/04/07/detect-data-type/index.html","hash":"2d543808ca30a05ca15540fe610a8f28d353cfb1","modified":1712716711809},{"_id":"public/2024/04/07/decode-message/index.html","hash":"194c2f3cdba2481a4491477a8e312e7f7ab95ac3","modified":1712716711809},{"_id":"public/archives/index.html","hash":"16f7b4c49bca2174fc5e76a1a92b3e2b2a3c5c51","modified":1712735804492},{"_id":"public/index.html","hash":"fc8cf3d9b7f29f52801f85c8bba4f8fbb6c4b504","modified":1712735804492},{"_id":"public/tags/js„ÄÅarray/index.html","hash":"1925bd47676ed48be3b58a568dd4560bb95cd9cf","modified":1712716711809},{"_id":"public/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1712716711809},{"_id":"public/css/components/archive.css","hash":"cea7d6edd8221c00602a799e67046365b2ad929e","modified":1712716711809},{"_id":"public/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1712716711809},{"_id":"public/css/components/categories.css","hash":"f181d27640f1408f032c5386836c4c2322724f8d","modified":1712716711809},{"_id":"public/css/components/article.css","hash":"3a1316dbf86a4f52cf8da789f3a13e94504dee76","modified":1712716711809},{"_id":"public/css/components/header.css","hash":"51f8a4c736f3b180a7c4c8f804d8060031df6a34","modified":1712716711809},{"_id":"public/css/components/footer.css","hash":"602def895fd52f288b6e93932284aa2e52b7fee0","modified":1712716711809},{"_id":"public/css/components/icon.css","hash":"cdaf1a152184ff7def760f14095e4a2fa16cd6bd","modified":1712716711809},{"_id":"public/css/components/layout.css","hash":"7bffe71c7aba90b2fc5bc6dc1457db50018c7a6f","modified":1712716711809},{"_id":"public/css/components/pagination.css","hash":"88f7519c0c8ff96b436413528d5f568a4f3d2177","modified":1712716711809},{"_id":"public/css/components/responsive.css","hash":"216eb94fc69007de995fc8d382670ba00a9574e8","modified":1712716711809},{"_id":"public/css/components/tags.css","hash":"1566e94c23ae19dbfc7d2cf433e68242ed657dea","modified":1712716711809},{"_id":"public/css/components/syntax.css","hash":"80de949e0928eb18957f63e7435877085ca626fb","modified":1712716711809},{"_id":"public/css/style.css","hash":"9be8fa31f5f484cab1cb4fd4752ea15619580271","modified":1712716711809},{"_id":"source/_posts/improve-a-function.md","hash":"743e0a37bea3c66a5d80bf7ca0fd18b1237487b5","modified":1712733958864},{"_id":"public/2024/04/10/improve-a-function/index.html","hash":"99010ec60958591d15780119e3f300a40cfbe6f8","modified":1712734369769},{"_id":"source/_posts/Traverse-DOM-level-by-level.md","hash":"2c30fd5c2a0fadaff5a81a2c6b7ddbbfdd17302c","modified":1712734350336},{"_id":"public/2024/04/10/Traverse-DOM-level-by-level/index.html","hash":"eda302489fc6a8dcb8f36be73c9b6f85199b60bc","modified":1712734369769},{"_id":"source/_posts/find-the-largest-difference.md","hash":"c56dc7b62a47701e9cac1ccd21ac8c9b68a829ea","modified":1712735791538},{"_id":"public/2024/04/10/find-the-largest-difference/index.html","hash":"a0503f869abb225a8e3a857f9b1694f9b425877f","modified":1712735804492}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"decode-message","date":"2024-04-07T08:19:12.000Z","_content":"\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3\n   stop when cannot neither move down right or up right. the character on the path is the message\n   for the input above, IROCLED should be returned.\n\n**notes**\nif no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the message using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning going down).\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/decode-message\n","source":"_posts/decode-message.md","raw":"---\ntitle: decode-message\ndate: 2024-04-07 16:19:12\ntags: js„ÄÅarray\n---\n\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3\n   stop when cannot neither move down right or up right. the character on the path is the message\n   for the input above, IROCLED should be returned.\n\n**notes**\nif no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the message using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning going down).\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/decode-message\n","slug":"decode-message","published":1,"updated":"2024-04-07T09:27:38.122Z","comments":1,"layout":"post","photos":[],"_id":"clut7b4uy0000qdv9f2kgb9kh","content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3<br>stop when cannot neither move down right or up right. the character on the path is the message<br>for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong><br>if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We‚Äôll create a function called <code>decode</code> that accepts a 2D array and decodes the message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there‚Äôs only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3<br>stop when cannot neither move down right or up right. the character on the path is the message<br>for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong><br>if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We‚Äôll create a function called <code>decode</code> that accepts a 2D array and decodes the message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there‚Äôs only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"},{"title":"detect-data-type","date":"2024-04-07T09:44:30.000Z","_content":"\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in JavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data type including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the problem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/decode-message\n","source":"_posts/detect-data-type.md","raw":"---\ntitle: detect-data-type\ndate: 2024-04-07 17:44:30\ntags:\n---\n\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in JavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data type including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the problem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/decode-message\n","slug":"detect-data-type","published":1,"updated":"2024-04-09T07:32:39.688Z","comments":1,"layout":"post","photos":[],"_id":"clut7b4v30001qdv9eswkfzag","content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We‚Äôll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>if the type is in the set, we return it. Or we return ‚Äòobject‚Äô</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We‚Äôll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>if the type is in the set, we return it. Or we return ‚Äòobject‚Äô</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"},{"title":"this","date":"2024-04-09T07:44:19.000Z","_content":"\n## Problem Description\n\nWhat does the code snippet to the output by `console.log`\n\n```\nconst obj = {\n\ta: 1,\n\tb: function () {\n\t\tconsole.log(this.a);\n\t},\n\tc() {\n\t\tconsole.log(this.a);\n\t},\n\td: () => {\n\t\tconsole.log(this.a);\n\t},\n\te: (function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t})(),\n\tf: function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t},\n};\n\n\tconsole.log(obj.a);\n\tobj.b();\n\t;(obj.b)();\n\n\tconst b = obj.b;\n\tb();\n\tobj.b.apply({ a: 2 });\n\tobj.c();\n\tobj.d();\n\t;(obj.d)();\n\tobj.d.apply({ a: 2 });\n\tobj.e();\n\t;(obj.e)();\n\tobj.e.call({ a: 2 });\n\tobj.f()();\n\t;(obj.f())();\n\tobj.f().call({ a: 2 });\n```\n\n## The Solution\n\n- `const b = obj.b; b(); // undefined`\n\n  lose this binding\n\n- `obj.b.apply({ a: 2 }); `\n\n  this will be altered into `{a:2}`, note that the origin `obj.a` will not be\n  altered.\n\n- `obj.c(); //1`\n\n- `obj.d(); // undefined`\n\n  arrow function, this is actually window\n\n- `;(obj.d)(); // undefined`\n\n- `obj.d.apply({ a: 2 }); // undefined`\n\n  This behavior occurs because `obj.d` is an arrow function. Arrow functions do\n  not bind their own this context but inherit it from the surrounding lexical\n  context where they were defined. In this case, since `obj.d` is defined within\n  the object `obj`, the arrow function `d` retains the this value from the\n  surrounding context, which is the global object.\n\n- `obj.e();` `;(obj.e)();` `obj.e.call({ a: 2 });`\n\n  In the case of `obj.e`, the arrow function is created inside _ an immediately\n  invoked function expression (IIFE) _. Arrow functions inherit this from the\n  surrounding lexical context where they are defined. In this scenario, the\n  arrow function inside `obj.e` will capture the this value of the surrounding\n  context, which is the global object (typically window in a browser\n  environment).\n\n  Therefore, when `obj.e` is invoked, the this keyword inside the arrow function\n  will refer to the global object, maintaining the same this reference as the\n  surrounding context where the arrow function was defined.\n\n  In summary, when executing `obj.e`, the this keyword inside the arrow function\n  defined within `obj.e` will point to the global object (window in a browser\n  environment) due to the lexical scoping behavior of arrow functions.\n  immediately function, return the arrow function just as the `d()`, so this is\n  also points to the Window\n\n- `obj.f()(); ` `;(obj.f())();` `obj.f().call({ a: 2 });`\n\n  When invoking `obj.f()()`, the this keyword inside the arrow function returned\n  by `obj.f() ` will refer to the object `obj`. This behavior occurs because the\n  arrow function inherits its this value from the surrounding lexical context\n  where it was defined, which is the object `obj` in this case.\n\n  Therefore, when `obj.f()()` is executed, the this keyword inside the arrow\n  function will maintain its reference to the object `obj`, as it inherits the\n  this value from the lexical scope in which it was created.\n\n  In summary, when calling `obj.f()()`, the this keyword inside the arrow\n  function returned by `obj.f()` will point to the object obj.\n\n## The result\n\n```javascript\n// 1\nconsole.log(obj.a);\n\n//1\nobj.b();\n\n//1\nobj.b();\n\n// undefined\nconst b = obj.b;\nb();\n\n// 2\nobj.b.apply({ a: 2 });\n\n// 1\nobj.c();\n\n// undefined\nobj.d();\nobj.d();\nobj.d.apply({ a: 2 });\n\n// undefined\nobj.e();\nobj.e();\nobj.e.call({ a: 2 });\n\n// 1\nobj.f()();\n// 1\nobj.f()();\n\n// 1\nobj.f().call({ a: 2 });\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/quiz/this\n","source":"_posts/this.md","raw":"---\ntitle: this\ndate: 2024-04-09 15:44:19\ntags:\n---\n\n## Problem Description\n\nWhat does the code snippet to the output by `console.log`\n\n```\nconst obj = {\n\ta: 1,\n\tb: function () {\n\t\tconsole.log(this.a);\n\t},\n\tc() {\n\t\tconsole.log(this.a);\n\t},\n\td: () => {\n\t\tconsole.log(this.a);\n\t},\n\te: (function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t})(),\n\tf: function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t},\n};\n\n\tconsole.log(obj.a);\n\tobj.b();\n\t;(obj.b)();\n\n\tconst b = obj.b;\n\tb();\n\tobj.b.apply({ a: 2 });\n\tobj.c();\n\tobj.d();\n\t;(obj.d)();\n\tobj.d.apply({ a: 2 });\n\tobj.e();\n\t;(obj.e)();\n\tobj.e.call({ a: 2 });\n\tobj.f()();\n\t;(obj.f())();\n\tobj.f().call({ a: 2 });\n```\n\n## The Solution\n\n- `const b = obj.b; b(); // undefined`\n\n  lose this binding\n\n- `obj.b.apply({ a: 2 }); `\n\n  this will be altered into `{a:2}`, note that the origin `obj.a` will not be\n  altered.\n\n- `obj.c(); //1`\n\n- `obj.d(); // undefined`\n\n  arrow function, this is actually window\n\n- `;(obj.d)(); // undefined`\n\n- `obj.d.apply({ a: 2 }); // undefined`\n\n  This behavior occurs because `obj.d` is an arrow function. Arrow functions do\n  not bind their own this context but inherit it from the surrounding lexical\n  context where they were defined. In this case, since `obj.d` is defined within\n  the object `obj`, the arrow function `d` retains the this value from the\n  surrounding context, which is the global object.\n\n- `obj.e();` `;(obj.e)();` `obj.e.call({ a: 2 });`\n\n  In the case of `obj.e`, the arrow function is created inside _ an immediately\n  invoked function expression (IIFE) _. Arrow functions inherit this from the\n  surrounding lexical context where they are defined. In this scenario, the\n  arrow function inside `obj.e` will capture the this value of the surrounding\n  context, which is the global object (typically window in a browser\n  environment).\n\n  Therefore, when `obj.e` is invoked, the this keyword inside the arrow function\n  will refer to the global object, maintaining the same this reference as the\n  surrounding context where the arrow function was defined.\n\n  In summary, when executing `obj.e`, the this keyword inside the arrow function\n  defined within `obj.e` will point to the global object (window in a browser\n  environment) due to the lexical scoping behavior of arrow functions.\n  immediately function, return the arrow function just as the `d()`, so this is\n  also points to the Window\n\n- `obj.f()(); ` `;(obj.f())();` `obj.f().call({ a: 2 });`\n\n  When invoking `obj.f()()`, the this keyword inside the arrow function returned\n  by `obj.f() ` will refer to the object `obj`. This behavior occurs because the\n  arrow function inherits its this value from the surrounding lexical context\n  where it was defined, which is the object `obj` in this case.\n\n  Therefore, when `obj.f()()` is executed, the this keyword inside the arrow\n  function will maintain its reference to the object `obj`, as it inherits the\n  this value from the lexical scope in which it was created.\n\n  In summary, when calling `obj.f()()`, the this keyword inside the arrow\n  function returned by `obj.f()` will point to the object obj.\n\n## The result\n\n```javascript\n// 1\nconsole.log(obj.a);\n\n//1\nobj.b();\n\n//1\nobj.b();\n\n// undefined\nconst b = obj.b;\nb();\n\n// 2\nobj.b.apply({ a: 2 });\n\n// 1\nobj.c();\n\n// undefined\nobj.d();\nobj.d();\nobj.d.apply({ a: 2 });\n\n// undefined\nobj.e();\nobj.e();\nobj.e.call({ a: 2 });\n\n// 1\nobj.f()();\n// 1\nobj.f()();\n\n// 1\nobj.f().call({ a: 2 });\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/quiz/this\n","slug":"this","published":1,"updated":"2024-04-10T07:25:30.572Z","_id":"clut7b4v60003qdv92dlba3rx","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>What does the code snippet to the output by <code>console.log</code></p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tc() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">d</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">e</span>: (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;)(),</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(obj.a);</span><br><span class=\"line\">\tobj.b();</span><br><span class=\"line\">\t;(obj.b)();</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst b = obj.b;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">\tobj.b.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.c();</span><br><span class=\"line\">\tobj.d();</span><br><span class=\"line\">\t;(obj.d)();</span><br><span class=\"line\">\tobj.d.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.e();</span><br><span class=\"line\">\t;(obj.e)();</span><br><span class=\"line\">\tobj.e.call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.f()();</span><br><span class=\"line\">\t;(obj.f())();</span><br><span class=\"line\">\tobj.f().call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><ul>\n<li><p><code>const b = obj.b; b(); // undefined</code></p>\n<p>lose this binding</p>\n</li>\n<li><p><code>obj.b.apply(&#123; a: 2 &#125;); </code></p>\n<p>this will be altered into <code>&#123;a:2&#125;</code>, note that the origin <code>obj.a</code> will not be<br>altered.</p>\n</li>\n<li><p><code>obj.c(); //1</code></p>\n</li>\n<li><p><code>obj.d(); // undefined</code></p>\n<p>arrow function, this is actually window</p>\n</li>\n<li><p><code>;(obj.d)(); // undefined</code></p>\n</li>\n<li><p><code>obj.d.apply(&#123; a: 2 &#125;); // undefined</code></p>\n<p>This behavior occurs because <code>obj.d</code> is an arrow function. Arrow functions do<br>not bind their own this context but inherit it from the surrounding lexical<br>context where they were defined. In this case, since <code>obj.d</code> is defined within<br>the object <code>obj</code>, the arrow function <code>d</code> retains the this value from the<br>surrounding context, which is the global object.</p>\n</li>\n<li><p><code>obj.e();</code> <code>;(obj.e)();</code> <code>obj.e.call(&#123; a: 2 &#125;);</code></p>\n<p>In the case of <code>obj.e</code>, the arrow function is created inside _ an immediately<br>invoked function expression (IIFE) _. Arrow functions inherit this from the<br>surrounding lexical context where they are defined. In this scenario, the<br>arrow function inside <code>obj.e</code> will capture the this value of the surrounding<br>context, which is the global object (typically window in a browser<br>environment).</p>\n<p>Therefore, when <code>obj.e</code> is invoked, the this keyword inside the arrow function<br>will refer to the global object, maintaining the same this reference as the<br>surrounding context where the arrow function was defined.</p>\n<p>In summary, when executing <code>obj.e</code>, the this keyword inside the arrow function<br>defined within <code>obj.e</code> will point to the global object (window in a browser<br>environment) due to the lexical scoping behavior of arrow functions.<br>immediately function, return the arrow function just as the <code>d()</code>, so this is<br>also points to the Window</p>\n</li>\n<li><p><code>obj.f()(); </code> <code>;(obj.f())();</code> <code>obj.f().call(&#123; a: 2 &#125;);</code></p>\n<p>When invoking <code>obj.f()()</code>, the this keyword inside the arrow function returned<br>by <code>obj.f() </code> will refer to the object <code>obj</code>. This behavior occurs because the<br>arrow function inherits its this value from the surrounding lexical context<br>where it was defined, which is the object <code>obj</code> in this case.</p>\n<p>Therefore, when <code>obj.f()()</code> is executed, the this keyword inside the arrow<br>function will maintain its reference to the object <code>obj</code>, as it inherits the<br>this value from the lexical scope in which it was created.</p>\n<p>In summary, when calling <code>obj.f()()</code>, the this keyword inside the arrow<br>function returned by <code>obj.f()</code> will point to the object obj.</p>\n</li>\n</ul>\n<h2 id=\"The-result\"><a href=\"#The-result\" class=\"headerlink\" title=\"The result\"></a>The result</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = obj.<span class=\"property\">b</span>;</span><br><span class=\"line\"><span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">c</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"property\">d</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"property\">e</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>().<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/quiz/this\">https://bigfrontend.dev/quiz/this</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>What does the code snippet to the output by <code>console.log</code></p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tc() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">d</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">e</span>: (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;)(),</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(obj.a);</span><br><span class=\"line\">\tobj.b();</span><br><span class=\"line\">\t;(obj.b)();</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst b = obj.b;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">\tobj.b.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.c();</span><br><span class=\"line\">\tobj.d();</span><br><span class=\"line\">\t;(obj.d)();</span><br><span class=\"line\">\tobj.d.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.e();</span><br><span class=\"line\">\t;(obj.e)();</span><br><span class=\"line\">\tobj.e.call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.f()();</span><br><span class=\"line\">\t;(obj.f())();</span><br><span class=\"line\">\tobj.f().call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><ul>\n<li><p><code>const b = obj.b; b(); // undefined</code></p>\n<p>lose this binding</p>\n</li>\n<li><p><code>obj.b.apply(&#123; a: 2 &#125;); </code></p>\n<p>this will be altered into <code>&#123;a:2&#125;</code>, note that the origin <code>obj.a</code> will not be<br>altered.</p>\n</li>\n<li><p><code>obj.c(); //1</code></p>\n</li>\n<li><p><code>obj.d(); // undefined</code></p>\n<p>arrow function, this is actually window</p>\n</li>\n<li><p><code>;(obj.d)(); // undefined</code></p>\n</li>\n<li><p><code>obj.d.apply(&#123; a: 2 &#125;); // undefined</code></p>\n<p>This behavior occurs because <code>obj.d</code> is an arrow function. Arrow functions do<br>not bind their own this context but inherit it from the surrounding lexical<br>context where they were defined. In this case, since <code>obj.d</code> is defined within<br>the object <code>obj</code>, the arrow function <code>d</code> retains the this value from the<br>surrounding context, which is the global object.</p>\n</li>\n<li><p><code>obj.e();</code> <code>;(obj.e)();</code> <code>obj.e.call(&#123; a: 2 &#125;);</code></p>\n<p>In the case of <code>obj.e</code>, the arrow function is created inside _ an immediately<br>invoked function expression (IIFE) _. Arrow functions inherit this from the<br>surrounding lexical context where they are defined. In this scenario, the<br>arrow function inside <code>obj.e</code> will capture the this value of the surrounding<br>context, which is the global object (typically window in a browser<br>environment).</p>\n<p>Therefore, when <code>obj.e</code> is invoked, the this keyword inside the arrow function<br>will refer to the global object, maintaining the same this reference as the<br>surrounding context where the arrow function was defined.</p>\n<p>In summary, when executing <code>obj.e</code>, the this keyword inside the arrow function<br>defined within <code>obj.e</code> will point to the global object (window in a browser<br>environment) due to the lexical scoping behavior of arrow functions.<br>immediately function, return the arrow function just as the <code>d()</code>, so this is<br>also points to the Window</p>\n</li>\n<li><p><code>obj.f()(); </code> <code>;(obj.f())();</code> <code>obj.f().call(&#123; a: 2 &#125;);</code></p>\n<p>When invoking <code>obj.f()()</code>, the this keyword inside the arrow function returned<br>by <code>obj.f() </code> will refer to the object <code>obj</code>. This behavior occurs because the<br>arrow function inherits its this value from the surrounding lexical context<br>where it was defined, which is the object <code>obj</code> in this case.</p>\n<p>Therefore, when <code>obj.f()()</code> is executed, the this keyword inside the arrow<br>function will maintain its reference to the object <code>obj</code>, as it inherits the<br>this value from the lexical scope in which it was created.</p>\n<p>In summary, when calling <code>obj.f()()</code>, the this keyword inside the arrow<br>function returned by <code>obj.f()</code> will point to the object obj.</p>\n</li>\n</ul>\n<h2 id=\"The-result\"><a href=\"#The-result\" class=\"headerlink\" title=\"The result\"></a>The result</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = obj.<span class=\"property\">b</span>;</span><br><span class=\"line\"><span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">c</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"property\">d</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"property\">e</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>().<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/quiz/this\">https://bigfrontend.dev/quiz/this</a></p>\n</blockquote>\n"},{"title":"improve-a-function","date":"2024-04-10T02:41:07.000Z","_content":"\n## Problem Description\n\n```\n// Given an input of array,\n// which is made of items with >= 3 properties\n\nlet items = [\n  {color: 'red', type: 'tv', age: 18},\n  {color: 'silver', type: 'phone', age: 20},\n  {color: 'blue', type: 'book', age: 17}\n]\n\n// an exclude array made of key value pair\nconst excludes = [\n  {k: 'color', v: 'silver'},\n  {k: 'type', v: 'tv'},\n  ...\n]\n\nfunction excludeItems(items, excludes) {\n  excludes.forEach( pair => {\n    items = items.filter(item => item[pair.k] === item[pair.v])\n  })\n\n  return items\n}\n```\n\n1. What does this function excludeItems do?\n\n2. Is this function working as expected ?\n\n3. What is the time complexity of this function?\n\n4. How would you optimize it ?\n\n## The Solution\n\nOur task is to filter the items based on the conditions specified in the\n\"exclude\" array. For example, if the conditions are {\"color\": \"silver\"} and\n{\"type\": \"TV\"}, then the item that matches both conditions (i.e., a silver TV)\nwould be excluded.\n\nBut, as we'll see, there's a typo in the function that prevents it from working\nas expected.\n\nThe first thing we need to do is fix the typo in the function. Instead of\nexcluding items that match the conditions, the function is currently excluding\nitems that don't match the conditions. To fix this, we need to change the `!==`\noperator to `===` in the if statement. Also the condition should be\n`item[pair.k] !== pair.v`\n\nThe optimized version of the excludeItems function still has a time complexity\nof O(n \\* m), where n is the number of items in the items array and m is the\nnumber of key-value pairs in the excludes array. However, the optimization lies\nin the fact that it only iterates over the items array once, regardless of the\nnumber of key-value pairs in the excludes array.\n\nThe optimization involves creating a set of excluded properties and values\nfirst, and then filtering the items array based on this set. By doing so, it\navoids iterating over the entire items array multiple times, which was the case\nin the original implementation.\n\nThe optimized version achieves better performance by iterating over the items\narray only once and using a set to efficiently check for excluded properties and\nvalues. This approach reduces the number of iterations and comparisons needed to\nfilter the items, leading to improved efficiency compared to the original\nimplementation.\n\n## The resolve\n\n```\nfunction excludeItems(items, exclude) {\n  const excludeMap = new Map();\n  for (const condition of exclude) {\n    const {key, value} = condition;\n    if (!excludeMap.has(key)) {\n      excludeMap.set(key, new Set());\n    }\n    excludeMap.get(key).add(value);\n  }\n\n  return items.filter(item => {\n    for (const [key, valueSet] of excludeMap.entries()) {\n      if (valueSet.has(item[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/improve-a-function\n","source":"_posts/improve-a-function.md","raw":"---\ntitle: improve-a-function\ndate: 2024-04-10 10:41:07\ntags:\n---\n\n## Problem Description\n\n```\n// Given an input of array,\n// which is made of items with >= 3 properties\n\nlet items = [\n  {color: 'red', type: 'tv', age: 18},\n  {color: 'silver', type: 'phone', age: 20},\n  {color: 'blue', type: 'book', age: 17}\n]\n\n// an exclude array made of key value pair\nconst excludes = [\n  {k: 'color', v: 'silver'},\n  {k: 'type', v: 'tv'},\n  ...\n]\n\nfunction excludeItems(items, excludes) {\n  excludes.forEach( pair => {\n    items = items.filter(item => item[pair.k] === item[pair.v])\n  })\n\n  return items\n}\n```\n\n1. What does this function excludeItems do?\n\n2. Is this function working as expected ?\n\n3. What is the time complexity of this function?\n\n4. How would you optimize it ?\n\n## The Solution\n\nOur task is to filter the items based on the conditions specified in the\n\"exclude\" array. For example, if the conditions are {\"color\": \"silver\"} and\n{\"type\": \"TV\"}, then the item that matches both conditions (i.e., a silver TV)\nwould be excluded.\n\nBut, as we'll see, there's a typo in the function that prevents it from working\nas expected.\n\nThe first thing we need to do is fix the typo in the function. Instead of\nexcluding items that match the conditions, the function is currently excluding\nitems that don't match the conditions. To fix this, we need to change the `!==`\noperator to `===` in the if statement. Also the condition should be\n`item[pair.k] !== pair.v`\n\nThe optimized version of the excludeItems function still has a time complexity\nof O(n \\* m), where n is the number of items in the items array and m is the\nnumber of key-value pairs in the excludes array. However, the optimization lies\nin the fact that it only iterates over the items array once, regardless of the\nnumber of key-value pairs in the excludes array.\n\nThe optimization involves creating a set of excluded properties and values\nfirst, and then filtering the items array based on this set. By doing so, it\navoids iterating over the entire items array multiple times, which was the case\nin the original implementation.\n\nThe optimized version achieves better performance by iterating over the items\narray only once and using a set to efficiently check for excluded properties and\nvalues. This approach reduces the number of iterations and comparisons needed to\nfilter the items, leading to improved efficiency compared to the original\nimplementation.\n\n## The resolve\n\n```\nfunction excludeItems(items, exclude) {\n  const excludeMap = new Map();\n  for (const condition of exclude) {\n    const {key, value} = condition;\n    if (!excludeMap.has(key)) {\n      excludeMap.set(key, new Set());\n    }\n    excludeMap.get(key).add(value);\n  }\n\n  return items.filter(item => {\n    for (const [key, valueSet] of excludeMap.entries()) {\n      if (valueSet.has(item[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/improve-a-function\n","slug":"improve-a-function","published":1,"updated":"2024-04-10T07:25:58.864Z","_id":"clut7eh590000qvv915waevau","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Given <span class=\"keyword\">an</span> <span class=\"built_in\">input</span> of array,</span><br><span class=\"line\">// which <span class=\"keyword\">is</span> made of <span class=\"built_in\">items</span> with &gt;= <span class=\"number\">3</span> properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">items</span> = [</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;tv&#x27;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;silver&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;phone&#x27;</span>, age: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;book&#x27;</span>, age: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">an</span> exclude array made of key value pair</span><br><span class=\"line\">const excludes = [</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;color&#x27;</span>, v: <span class=\"string\">&#x27;silver&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;type&#x27;</span>, v: <span class=\"string\">&#x27;tv&#x27;</span>&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">excludeItems</span><span class=\"params\">(items, excludes)</span> &#123;</span><br><span class=\"line\">  excludes.forEach( pair =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">items</span> = <span class=\"built_in\">items</span>.<span class=\"built_in\">filter</span>(item =&gt; item[pair.<span class=\"keyword\">k</span>] === item[pair.v])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>What does this function excludeItems do?</p>\n</li>\n<li><p>Is this function working as expected ?</p>\n</li>\n<li><p>What is the time complexity of this function?</p>\n</li>\n<li><p>How would you optimize it ?</p>\n</li>\n</ol>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our task is to filter the items based on the conditions specified in the<br>‚Äúexclude‚Äù array. For example, if the conditions are {‚Äúcolor‚Äù: ‚Äúsilver‚Äù} and<br>{‚Äútype‚Äù: ‚ÄúTV‚Äù}, then the item that matches both conditions (i.e., a silver TV)<br>would be excluded.</p>\n<p>But, as we‚Äôll see, there‚Äôs a typo in the function that prevents it from working<br>as expected.</p>\n<p>The first thing we need to do is fix the typo in the function. Instead of<br>excluding items that match the conditions, the function is currently excluding<br>items that don‚Äôt match the conditions. To fix this, we need to change the <code>!==</code><br>operator to <code>===</code> in the if statement. Also the condition should be<br><code>item[pair.k] !== pair.v</code></p>\n<p>The optimized version of the excludeItems function still has a time complexity<br>of O(n * m), where n is the number of items in the items array and m is the<br>number of key-value pairs in the excludes array. However, the optimization lies<br>in the fact that it only iterates over the items array once, regardless of the<br>number of key-value pairs in the excludes array.</p>\n<p>The optimization involves creating a set of excluded properties and values<br>first, and then filtering the items array based on this set. By doing so, it<br>avoids iterating over the entire items array multiple times, which was the case<br>in the original implementation.</p>\n<p>The optimized version achieves better performance by iterating over the items<br>array only once and using a set to efficiently check for excluded properties and<br>values. This approach reduces the number of iterations and comparisons needed to<br>filter the items, leading to improved efficiency compared to the original<br>implementation.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">excludeItems</span>(items, exclude) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> excludeMap = <span class=\"keyword\">new </span><span class=\"class title_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> condition of exclude) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;<span class=\"built_in\">key</span>, value&#125; = condition;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!excludeMap.<span class=\"property\">has</span>(<span class=\"built_in\">key</span>)) &#123;</span><br><span class=\"line\">      excludeMap.<span class=\"property\">set</span>(<span class=\"built_in\">key</span>, <span class=\"keyword\">new </span><span class=\"class title_\">Set</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    excludeMap.<span class=\"property\">get</span>(<span class=\"built_in\">key</span>).<span class=\"property\">add</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items.<span class=\"property\">filter</span>(item =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [<span class=\"built_in\">key</span>, valueSet] of excludeMap.<span class=\"property\">entries</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valueSet.<span class=\"property\">has</span>(item[<span class=\"built_in\">key</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/improve-a-function\">https://bigfrontend.dev/problem/improve-a-function</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Given <span class=\"keyword\">an</span> <span class=\"built_in\">input</span> of array,</span><br><span class=\"line\">// which <span class=\"keyword\">is</span> made of <span class=\"built_in\">items</span> with &gt;= <span class=\"number\">3</span> properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">items</span> = [</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;tv&#x27;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;silver&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;phone&#x27;</span>, age: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;book&#x27;</span>, age: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">an</span> exclude array made of key value pair</span><br><span class=\"line\">const excludes = [</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;color&#x27;</span>, v: <span class=\"string\">&#x27;silver&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;type&#x27;</span>, v: <span class=\"string\">&#x27;tv&#x27;</span>&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">excludeItems</span><span class=\"params\">(items, excludes)</span> &#123;</span><br><span class=\"line\">  excludes.forEach( pair =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">items</span> = <span class=\"built_in\">items</span>.<span class=\"built_in\">filter</span>(item =&gt; item[pair.<span class=\"keyword\">k</span>] === item[pair.v])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>What does this function excludeItems do?</p>\n</li>\n<li><p>Is this function working as expected ?</p>\n</li>\n<li><p>What is the time complexity of this function?</p>\n</li>\n<li><p>How would you optimize it ?</p>\n</li>\n</ol>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our task is to filter the items based on the conditions specified in the<br>‚Äúexclude‚Äù array. For example, if the conditions are {‚Äúcolor‚Äù: ‚Äúsilver‚Äù} and<br>{‚Äútype‚Äù: ‚ÄúTV‚Äù}, then the item that matches both conditions (i.e., a silver TV)<br>would be excluded.</p>\n<p>But, as we‚Äôll see, there‚Äôs a typo in the function that prevents it from working<br>as expected.</p>\n<p>The first thing we need to do is fix the typo in the function. Instead of<br>excluding items that match the conditions, the function is currently excluding<br>items that don‚Äôt match the conditions. To fix this, we need to change the <code>!==</code><br>operator to <code>===</code> in the if statement. Also the condition should be<br><code>item[pair.k] !== pair.v</code></p>\n<p>The optimized version of the excludeItems function still has a time complexity<br>of O(n * m), where n is the number of items in the items array and m is the<br>number of key-value pairs in the excludes array. However, the optimization lies<br>in the fact that it only iterates over the items array once, regardless of the<br>number of key-value pairs in the excludes array.</p>\n<p>The optimization involves creating a set of excluded properties and values<br>first, and then filtering the items array based on this set. By doing so, it<br>avoids iterating over the entire items array multiple times, which was the case<br>in the original implementation.</p>\n<p>The optimized version achieves better performance by iterating over the items<br>array only once and using a set to efficiently check for excluded properties and<br>values. This approach reduces the number of iterations and comparisons needed to<br>filter the items, leading to improved efficiency compared to the original<br>implementation.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">excludeItems</span>(items, exclude) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> excludeMap = <span class=\"keyword\">new </span><span class=\"class title_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> condition of exclude) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;<span class=\"built_in\">key</span>, value&#125; = condition;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!excludeMap.<span class=\"property\">has</span>(<span class=\"built_in\">key</span>)) &#123;</span><br><span class=\"line\">      excludeMap.<span class=\"property\">set</span>(<span class=\"built_in\">key</span>, <span class=\"keyword\">new </span><span class=\"class title_\">Set</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    excludeMap.<span class=\"property\">get</span>(<span class=\"built_in\">key</span>).<span class=\"property\">add</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items.<span class=\"property\">filter</span>(item =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [<span class=\"built_in\">key</span>, valueSet] of excludeMap.<span class=\"property\">entries</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valueSet.<span class=\"property\">has</span>(item[<span class=\"built_in\">key</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/improve-a-function\">https://bigfrontend.dev/problem/improve-a-function</a></p>\n</blockquote>\n"},{"title":"Traverse-DOM-level-by-level","date":"2024-04-10T07:22:57.000Z","_content":"\n---\n\ntitle: improve-a-function date: 2024-04-10 10:41:07 tags:\n\n---\n\n## Problem Description\n\nGiven a DOM tree, flatten it into an one dimensional array, in the order of\nlayer by layer, like below.\n![](https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png)\n\n## The Solution\n\nWe need to traverse it level by level, resulting in this array:  \n`[div, p, p, div, a, img, button]`\n\nThis problem is a typical BFS (Breadth-First Search) problem, which we can solve\nusing a queue. Here's a step-by-step approach:\n\n1. Create a queue and add the root to it.\n\n2. While the queue is not empty, shift the head out and add it to the result.\n\n3. Add the children of the current node to the queue.\n\n4. Repeat steps 2-3 until the queue is empty.\n\n## The resolve\n\n```\nfunction traverseDOM(root) {\n  if (!root) return [];\n\n  const result = [];\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    result.push(current);\n\n    if (current.children) {\n      for (let child of current.children) {\n        queue.push(child);\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\n","source":"_posts/Traverse-DOM-level-by-level.md","raw":"---\ntitle: Traverse-DOM-level-by-level\ndate: 2024-04-10 15:22:57\ntags:\n---\n\n---\n\ntitle: improve-a-function date: 2024-04-10 10:41:07 tags:\n\n---\n\n## Problem Description\n\nGiven a DOM tree, flatten it into an one dimensional array, in the order of\nlayer by layer, like below.\n![](https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png)\n\n## The Solution\n\nWe need to traverse it level by level, resulting in this array:  \n`[div, p, p, div, a, img, button]`\n\nThis problem is a typical BFS (Breadth-First Search) problem, which we can solve\nusing a queue. Here's a step-by-step approach:\n\n1. Create a queue and add the root to it.\n\n2. While the queue is not empty, shift the head out and add it to the result.\n\n3. Add the children of the current node to the queue.\n\n4. Repeat steps 2-3 until the queue is empty.\n\n## The resolve\n\n```\nfunction traverseDOM(root) {\n  if (!root) return [];\n\n  const result = [];\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    result.push(current);\n\n    if (current.children) {\n      for (let child of current.children) {\n        queue.push(child);\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\n","slug":"Traverse-DOM-level-by-level","published":1,"updated":"2024-04-10T07:32:30.336Z","_id":"cluthh2xh0000sov95njd8vpi","comments":1,"layout":"post","photos":[],"content":"<hr>\n<p>title: improve-a-function date: 2024-04-10 10:41:07 tags:</p>\n<hr>\n<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given a DOM tree, flatten it into an one dimensional array, in the order of<br>layer by layer, like below.<br><img src=\"https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png\"></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We need to traverse it level by level, resulting in this array:<br><code>[div, p, p, div, a, img, button]</code></p>\n<p>This problem is a typical BFS (Breadth-First Search) problem, which we can solve<br>using a queue. Here‚Äôs a step-by-step approach:</p>\n<ol>\n<li><p>Create a queue and add the root to it.</p>\n</li>\n<li><p>While the queue is not empty, shift the head out and add it to the result.</p>\n</li>\n<li><p>Add the children of the current node to the queue.</p>\n</li>\n<li><p>Repeat steps 2-3 until the queue is empty.</p>\n</li>\n</ol>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">traverseDOM</span><span class=\"params\">(root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"type\">const</span> queue = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> current = queue.<span class=\"built_in\">shift</span>();</span><br><span class=\"line\">    result.<span class=\"built_in\">push</span>(current);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (let child of current.children) &#123;</span><br><span class=\"line\">        queue.<span class=\"built_in\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\">https://bigfrontend.dev/problem/Traverse-DOM-level-by-level</a></p>\n</blockquote>\n","excerpt":"","more":"<hr>\n<p>title: improve-a-function date: 2024-04-10 10:41:07 tags:</p>\n<hr>\n<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given a DOM tree, flatten it into an one dimensional array, in the order of<br>layer by layer, like below.<br><img src=\"https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png\"></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We need to traverse it level by level, resulting in this array:<br><code>[div, p, p, div, a, img, button]</code></p>\n<p>This problem is a typical BFS (Breadth-First Search) problem, which we can solve<br>using a queue. Here‚Äôs a step-by-step approach:</p>\n<ol>\n<li><p>Create a queue and add the root to it.</p>\n</li>\n<li><p>While the queue is not empty, shift the head out and add it to the result.</p>\n</li>\n<li><p>Add the children of the current node to the queue.</p>\n</li>\n<li><p>Repeat steps 2-3 until the queue is empty.</p>\n</li>\n</ol>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">traverseDOM</span><span class=\"params\">(root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"type\">const</span> queue = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> current = queue.<span class=\"built_in\">shift</span>();</span><br><span class=\"line\">    result.<span class=\"built_in\">push</span>(current);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (let child of current.children) &#123;</span><br><span class=\"line\">        queue.<span class=\"built_in\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\">https://bigfrontend.dev/problem/Traverse-DOM-level-by-level</a></p>\n</blockquote>\n"},{"title":"find-the-largest-difference","date":"2024-04-10T07:40:04.000Z","_content":"\n## Problem Description\n\nGiven an array of numbers, pick any two numbers a and b, we could get the\ndifference by Math.abs(a - b).\n\nCan you write a function to get the largest difference?\n\n```\nlargestDiff([-1, 2,3,10, 9])\n// 11, obviously Math.abs(-1 - 10) is the largest\n\nlargestDiff([])\n// 0\n\nlargestDiff([1])\n// 0\n```\n\n## The Solution\n\nwe're given an array of numbers. The task is to pick any two numbers, find the\ndifference, and determine the largest difference. Here's how we can tackle this\nproblem:\n\nFirst, let's write a function to calculate the largest difference. We'll need to\nhandle an edge case: if the length of the array is zero, return 0.\n\nNext, we can calculate the difference between the maximum and minimum values. In\njust two lines of code, we can accomplish this with:\n\n```\n    if (array.length == 0) {\n        return 0\n    } else {\n        return max(array) - min(array)\n    }\n```\n\nSecondÔºå if we are not allowed to use Math.min() and Math.max(), we can use loop\nto find the max and min and then get the result.\n\nTo do this, we'll keep track of the minimum with a value of infinity, and set\nthe initial value for max to negative infinity.\n\nThe we use the loop function to compare the number one by one and calculate the\nresult.\n\n## The resolve\n\n```\nfunction largestDiff(arr) {\n  if (!arr.length) {\n    return 0;\n  }\n  let min = Infinity;\n  let max = - Infinity;\n  let result = - Infinity;\n\n  for (let item in arr) {\n    if (item < min) {\n      min = item;\n      result = max - min;\n    }\n    if (item > max) {\n      max = item;\n      result = max -min;\n    }\n  }\n\n  return result;\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/Find-the-largest-difference\n","source":"_posts/find-the-largest-difference.md","raw":"---\ntitle: find-the-largest-difference\ndate: 2024-04-10 15:40:04\ntags:\n---\n\n## Problem Description\n\nGiven an array of numbers, pick any two numbers a and b, we could get the\ndifference by Math.abs(a - b).\n\nCan you write a function to get the largest difference?\n\n```\nlargestDiff([-1, 2,3,10, 9])\n// 11, obviously Math.abs(-1 - 10) is the largest\n\nlargestDiff([])\n// 0\n\nlargestDiff([1])\n// 0\n```\n\n## The Solution\n\nwe're given an array of numbers. The task is to pick any two numbers, find the\ndifference, and determine the largest difference. Here's how we can tackle this\nproblem:\n\nFirst, let's write a function to calculate the largest difference. We'll need to\nhandle an edge case: if the length of the array is zero, return 0.\n\nNext, we can calculate the difference between the maximum and minimum values. In\njust two lines of code, we can accomplish this with:\n\n```\n    if (array.length == 0) {\n        return 0\n    } else {\n        return max(array) - min(array)\n    }\n```\n\nSecondÔºå if we are not allowed to use Math.min() and Math.max(), we can use loop\nto find the max and min and then get the result.\n\nTo do this, we'll keep track of the minimum with a value of infinity, and set\nthe initial value for max to negative infinity.\n\nThe we use the loop function to compare the number one by one and calculate the\nresult.\n\n## The resolve\n\n```\nfunction largestDiff(arr) {\n  if (!arr.length) {\n    return 0;\n  }\n  let min = Infinity;\n  let max = - Infinity;\n  let result = - Infinity;\n\n  for (let item in arr) {\n    if (item < min) {\n      min = item;\n      result = max - min;\n    }\n    if (item > max) {\n      max = item;\n      result = max -min;\n    }\n  }\n\n  return result;\n}\n```\n\n> ËØ•È¢òÁõÆÊù•Ëá™https://bigfrontend.dev/problem/Find-the-largest-difference\n","slug":"find-the-largest-difference","published":1,"updated":"2024-04-10T07:56:31.538Z","comments":1,"layout":"post","photos":[],"_id":"clutiocvw0000izv99k5r7hw4","content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given an array of numbers, pick any two numbers a and b, we could get the<br>difference by Math.abs(a - b).</p>\n<p>Can you write a function to get the largest difference?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([-<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>, <span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 11, obviously Math.abs(-1 - 10) is the largest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([<span class=\"number\">1</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>we‚Äôre given an array of numbers. The task is to pick any two numbers, find the<br>difference, and determine the largest difference. Here‚Äôs how we can tackle this<br>problem:</p>\n<p>First, let‚Äôs write a function to calculate the largest difference. We‚Äôll need to<br>handle an edge case: if the length of the array is zero, return 0.</p>\n<p>Next, we can calculate the difference between the maximum and minimum values. In<br>just two lines of code, we can accomplish this with:</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">array</span>) - <span class=\"built_in\">min</span>(<span class=\"built_in\">array</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SecondÔºå if we are not allowed to use Math.min() and Math.max(), we can use loop<br>to find the max and min and then get the result.</p>\n<p>To do this, we‚Äôll keep track of the minimum with a value of infinity, and set<br>the initial value for max to negative infinity.</p>\n<p>The we use the loop function to compare the number one by one and calculate the<br>result.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> largestDiff(arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> min</span> = Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> max</span> = - Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = - Infinity;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"type\">item</span> <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &lt;<span class=\"built_in\"> min</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> min</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -<span class=\"built_in\"> min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &gt;<span class=\"built_in\"> max</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> max</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/Find-the-largest-difference\">https://bigfrontend.dev/problem/Find-the-largest-difference</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given an array of numbers, pick any two numbers a and b, we could get the<br>difference by Math.abs(a - b).</p>\n<p>Can you write a function to get the largest difference?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([-<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>, <span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 11, obviously Math.abs(-1 - 10) is the largest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([<span class=\"number\">1</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>we‚Äôre given an array of numbers. The task is to pick any two numbers, find the<br>difference, and determine the largest difference. Here‚Äôs how we can tackle this<br>problem:</p>\n<p>First, let‚Äôs write a function to calculate the largest difference. We‚Äôll need to<br>handle an edge case: if the length of the array is zero, return 0.</p>\n<p>Next, we can calculate the difference between the maximum and minimum values. In<br>just two lines of code, we can accomplish this with:</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">array</span>) - <span class=\"built_in\">min</span>(<span class=\"built_in\">array</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SecondÔºå if we are not allowed to use Math.min() and Math.max(), we can use loop<br>to find the max and min and then get the result.</p>\n<p>To do this, we‚Äôll keep track of the minimum with a value of infinity, and set<br>the initial value for max to negative infinity.</p>\n<p>The we use the loop function to compare the number one by one and calculate the<br>result.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> largestDiff(arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> min</span> = Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> max</span> = - Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = - Infinity;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"type\">item</span> <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &lt;<span class=\"built_in\"> min</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> min</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -<span class=\"built_in\"> min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &gt;<span class=\"built_in\"> max</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> max</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>ËØ•È¢òÁõÆÊù•Ëá™<a href=\"https://bigfrontend.dev/problem/Find-the-largest-difference\">https://bigfrontend.dev/problem/Find-the-largest-difference</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clut7b4uy0000qdv9f2kgb9kh","tag_id":"clut7b4v40002qdv9hdsxcdrf","_id":"clut7b4v70004qdv9c1m23x06"}],"Tag":[{"name":"js„ÄÅarray","_id":"clut7b4v40002qdv9hdsxcdrf"}]}}