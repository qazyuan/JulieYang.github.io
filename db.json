{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo1.png","path":"images/logo1.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Traverse-DOM-level-by-level.md","hash":"e805887032a277fa05403ea568ddcefd40a11599","modified":1713960882500},{"_id":"source/_posts/detect-data-type.md","hash":"82d8775be4529f1beb489deb7143cbdeba8f96bb","modified":1713960824489},{"_id":"source/_posts/implement-once.md","hash":"849d0de23a61087a7a9644414d25e92f6c134218","modified":1713960840072},{"_id":"source/_posts/find-the-largest-difference.md","hash":"34f648b7bc782e8169868169d066377e0988bb04","modified":1713960833563},{"_id":"source/_posts/decode-message.md","hash":"37cb9b8a0da65f3bf60b4367b6201bc4955ff9a3","modified":1713960796335},{"_id":"source/_posts/promisify.md","hash":"d3fef38686fc8b0dcdac79be68455de7aa3e7c95","modified":1713960867683},{"_id":"source/_posts/improve-a-function.md","hash":"7074b0447cc980735f6973c061e21d10b7d0c7f9","modified":1713960845715},{"_id":"source/_posts/this.md","hash":"3b03464b4181fc6020a8df866ef8ca3b769a2601","modified":1713960861926},{"_id":"themes/cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1685777179000},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1685777179000},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1685777179000},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1685777179000},{"_id":"themes/cactus/README.md","hash":"52fafba48b0c792478e134a659bc8f0f61b4557b","modified":1685777179000},{"_id":"themes/cactus/_config.yml","hash":"c7131b30bac67c079d3a377ad49bda25003ff690","modified":1713952825467},{"_id":"themes/cactus/package.json","hash":"dbb0a486006e7d4ecdb4b005b6a9b264b5d542dc","modified":1685777179000},{"_id":"themes/cactus/gulpfile.js","hash":"70d419549ba72e0906fd2fc8103701142eb883a7","modified":1685777179000},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1685777179000},{"_id":"themes/cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1685777179000},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1685777179000},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1685777179000},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1685777179000},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1685777179000},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1685777179000},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1685777179000},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1685777179000},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1685777179000},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1685777179000},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1685777179000},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1685777179000},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1685777179000},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1685777179000},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1685777179000},{"_id":"themes/cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1685777179000},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1685777179000},{"_id":"themes/cactus/layout/archive.ejs","hash":"8e9bb1199694b229d2a3de1c3a55188a28e6f5e7","modified":1685777179000},{"_id":"themes/cactus/layout/layout.ejs","hash":"e03062a5a70d71dff9f09dd86769d1a13b33afd9","modified":1685777179000},{"_id":"themes/cactus/layout/index.ejs","hash":"fb73e020655ec4696eb7f91a350bf3b9c0fa2755","modified":1685777179000},{"_id":"themes/cactus/layout/post.ejs","hash":"f8eac342118298447ef38c21f9560a359e488395","modified":1685777179000},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1685777179000},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1685777179000},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1685777179000},{"_id":"themes/cactus/scripts/error_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1685777179000},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1685777179000},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1685777179000},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"58a835ff0ca307ba01b7f4e7962316b61641cac0","modified":1713950633835},{"_id":"themes/cactus/layout/_partial/google_analytics.ejs","hash":"64aeee0fdfc06207573ddbf8b91f6d3f007ccea9","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"247bf8ec39965fe07b52f5a3d04e02e0aaf2da57","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"4709e17487315e8f0a5b38f0611f0244f16fdd87","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"21d60f0bb82367cc2bee0c7eb3c06c7f5ab56a6d","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"9bbc0cf2dd0d7cdaafe827c3945a9bea1503da83","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1685777179000},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/umami_analytics.ejs","hash":"3e79be7343c4d0a5971d3aa659e3750672a91e72","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1685777179000},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1685777179000},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1685777179000},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1685777179000},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1685777179000},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1685777179000},{"_id":"themes/cactus/source/css/style.styl","hash":"4ee0091bfa3cf43fa528d54df378f3d977257342","modified":1685777179000},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1685777179000},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1685777179000},{"_id":"themes/cactus/source/js/main.js","hash":"f3cebbe16f4bc253158a0336261b284ff0f84faf","modified":1713951528583},{"_id":"themes/cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"5ee47fffaf428802cfe47dd2e6186c6bbff85067","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"23770328c7d900ecc7fd87930dc24b095eb272ac","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"58a89145633b4f4bfe8234e6a3f521257b8d0aee","modified":1713951585948},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"aeb99694d8492d4fcda320493b259fb68bf21830","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"9a15a7c005cfe518fdc9ec61a5107c76012f49d0","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"80bd2afd49b296e6441ab977a0614add710c32a3","modified":1685777179000},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"b2a00781d1301ff4d362b5d2a97480052ee4cae1","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1685777179000},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"8ce12f14382b6d471e3fe1266573b34fa84deaa0","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1685777179000},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1685777179000},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1685777179000},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1685777179000},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1685777179000},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1685777179000},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1685777179000},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1685777179000},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1685777179000},{"_id":"public/archives/index.html","hash":"30e0dfcaf68fb072df7826ab6b257678e0b429fd","modified":1713961781067},{"_id":"public/tags/js、array/index.html","hash":"b0109273386f9634113abbd3ec09b03e19a1a94e","modified":1713952425580},{"_id":"public/index.html","hash":"c99aadc4d2537b84a669129848cb5f0d05e1548b","modified":1713961781067},{"_id":"public/404.html","hash":"326970a32f15a3c64c5c0fa16730922970e39b9f","modified":1713952425580},{"_id":"public/2024/04/10/promisify/index.html","hash":"b7764eb5fc1010533193aa9fd41e4489cc626c32","modified":1713961781067},{"_id":"public/2024/04/10/implement-once/index.html","hash":"23d57b9e874304f6032e8b69d30ba9cdd1a26093","modified":1713961781067},{"_id":"public/2024/04/10/find-the-largest-difference/index.html","hash":"492f6693afc3832779ea98161e12117576daa42c","modified":1713961781067},{"_id":"public/2024/04/10/Traverse-DOM-level-by-level/index.html","hash":"da5a71e0bd3a4ec9883a037d1d819a4cadaba5d0","modified":1713961781067},{"_id":"public/2024/04/10/improve-a-function/index.html","hash":"1626ec4d0e56516a7dcfdaa8c91eec5e7383a16e","modified":1713961781067},{"_id":"public/2024/04/09/this/index.html","hash":"139c01b5774f87ddc54ef52e15f9eb1d6ed065a1","modified":1713961781067},{"_id":"public/2024/04/07/detect-data-type/index.html","hash":"a284969a7d4488de1e3a7d723b433b8d11195574","modified":1713961781067},{"_id":"public/2024/04/07/decode-message/index.html","hash":"42af61d6082b0adda6013dd16c0cd491a7497662","modified":1713961781067},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1713946325591},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1713946325591},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1713946325591},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1713946325591},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1713946325591},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1713946325591},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1713946325591},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1713946325591},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1713946325591},{"_id":"public/css/style.css","hash":"775c8fa6860f020f1bd5ebdc2d8346998602138a","modified":1713946325591},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1713946325591},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1713946325591},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1713946325591},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1713946325591},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1713946325591},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1713946325591},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1713946325591},{"_id":"source/about/index.md","hash":"dbf1c9685f2a573d6b1c3a6312192b98677ab768","modified":1713948994852},{"_id":"themes/cactus/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1713947201620},{"_id":"themes/cactus/source/.DS_Store","hash":"5057c35292ed55f44e2eb79429d01c8e3f90d590","modified":1713948508872},{"_id":"themes/cactus/source/images/logo1.png","hash":"cda357d86fea3c33e00280c5731ecc6fa891b77b","modified":1713947419545},{"_id":"source/.DS_Store","hash":"d3a48abfd2cd42cb1b6bdfa89d67877eb4ba4433","modified":1713948526818},{"_id":"public/about/index.html","hash":"0640c7e96a4ecbc0e220e7b79ef3657c53559767","modified":1713952425580},{"_id":"source/_posts/Promise.md","hash":"bbaad9e7bb998cab0b8357bfac2a5aa2febfe2ea","modified":1713961742713},{"_id":"public/2024/04/24/Promise/index.html","hash":"819bf01e38425ff804ab969ca7c9d3bd237838e5","modified":1713961781067},{"_id":"public/tags/js/index.html","hash":"14965fb1e156859f62ac0249bc91eaecf739308b","modified":1713961781067},{"_id":"public/tags/promise/index.html","hash":"24b0f9b554cc86e81858e88cd3b82360059986e1","modified":1713961781067},{"_id":"public/tags/algorithm/index.html","hash":"87689f5bcafc228ee417697cff8b183aa8558d60","modified":1713961781067},{"_id":"public/tags/array/index.html","hash":"52bdbed66fda1505ea277ffe456f459d411910d1","modified":1713961781067},{"_id":"public/tags/this/index.html","hash":"8e7c0a18a0c40ee2ce628d80079440522a3e261b","modified":1713961781067},{"_id":"public/tags/tree/index.html","hash":"d32ee1a4f803698cd6c3857201f7f1c478bd0f80","modified":1713961781067}],"Category":[],"Data":[],"Page":[{"title":"About Me","_content":"\n## SKILLS\n\n- **Proficient in HTML5 and CSS**: Extensive practice in creating responsive layouts for both mobile and desktop platforms, ensuring optimal user experience across various devices.\n- **Mastery of JavaScript and Typescript**: Skilled in utilizing the latest ES6 features to write clean, standardized code that adheres to industry best practices.\n- **Expertise in Vue**: In-depth understanding of the Vue framework, including both Vue 2 and Vue 3. Have studied and analyzed parts of the Vue 3 source code, including reactivity principles and diff algorithms.\n- **Experience with Build Tools**: Proficient in using Webpack and vite for building and packaging front-end applications, with a deep comprehension of front-end engineering processes and the ability to streamline development workflows using plugins.\n- **React Development**: Capable of developing engineering projects using React, with a solid understanding of the React ecosystem and hands-on experience in implementing projects from scratch.\n- **Backend Development Knowledge**: Familiar with Node and the Nest framework, possessing practical experience in back-end development, including the use of Docker and MySQL.\n- **Git Proficiency**: Skilled in using git for collaborative development, with a track record of managing versions and environments according to standards.\n- **Experienced in working with enterprise-level teams on collaborative projects.**\n\n## WORK EXPERIENCE\t \n\n2021.06 - 2023.08   \tShanghai Tuhu Information Technology, Senior Engineer\n\n2019.08 - 2021.06    \tZhongAn Insurance, Senior Engineer\n\n2017.03 - 2019.08     \tFront-end Development Engineer in F-Road, Engineer\n\n## CONTACT ME\n\nEmail: yzhuiyi@126.com\n\n","source":"about/index.md","raw":"---\ntitle: About Me\n---\n\n## SKILLS\n\n- **Proficient in HTML5 and CSS**: Extensive practice in creating responsive layouts for both mobile and desktop platforms, ensuring optimal user experience across various devices.\n- **Mastery of JavaScript and Typescript**: Skilled in utilizing the latest ES6 features to write clean, standardized code that adheres to industry best practices.\n- **Expertise in Vue**: In-depth understanding of the Vue framework, including both Vue 2 and Vue 3. Have studied and analyzed parts of the Vue 3 source code, including reactivity principles and diff algorithms.\n- **Experience with Build Tools**: Proficient in using Webpack and vite for building and packaging front-end applications, with a deep comprehension of front-end engineering processes and the ability to streamline development workflows using plugins.\n- **React Development**: Capable of developing engineering projects using React, with a solid understanding of the React ecosystem and hands-on experience in implementing projects from scratch.\n- **Backend Development Knowledge**: Familiar with Node and the Nest framework, possessing practical experience in back-end development, including the use of Docker and MySQL.\n- **Git Proficiency**: Skilled in using git for collaborative development, with a track record of managing versions and environments according to standards.\n- **Experienced in working with enterprise-level teams on collaborative projects.**\n\n## WORK EXPERIENCE\t \n\n2021.06 - 2023.08   \tShanghai Tuhu Information Technology, Senior Engineer\n\n2019.08 - 2021.06    \tZhongAn Insurance, Senior Engineer\n\n2017.03 - 2019.08     \tFront-end Development Engineer in F-Road, Engineer\n\n## CONTACT ME\n\nEmail: yzhuiyi@126.com\n\n","date":"2024-04-24T08:56:34.858Z","updated":"2024-04-24T08:56:34.852Z","path":"about/index.html","_id":"clvdjf17o0000zbv983yo3vnd","comments":1,"layout":"page","content":"<h2 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h2><ul>\n<li><strong>Proficient in HTML5 and CSS</strong>: Extensive practice in creating responsive layouts for both mobile and desktop platforms, ensuring optimal user experience across various devices.</li>\n<li><strong>Mastery of JavaScript and Typescript</strong>: Skilled in utilizing the latest ES6 features to write clean, standardized code that adheres to industry best practices.</li>\n<li><strong>Expertise in Vue</strong>: In-depth understanding of the Vue framework, including both Vue 2 and Vue 3. Have studied and analyzed parts of the Vue 3 source code, including reactivity principles and diff algorithms.</li>\n<li><strong>Experience with Build Tools</strong>: Proficient in using Webpack and vite for building and packaging front-end applications, with a deep comprehension of front-end engineering processes and the ability to streamline development workflows using plugins.</li>\n<li><strong>React Development</strong>: Capable of developing engineering projects using React, with a solid understanding of the React ecosystem and hands-on experience in implementing projects from scratch.</li>\n<li><strong>Backend Development Knowledge</strong>: Familiar with Node and the Nest framework, possessing practical experience in back-end development, including the use of Docker and MySQL.</li>\n<li><strong>Git Proficiency</strong>: Skilled in using git for collaborative development, with a track record of managing versions and environments according to standards.</li>\n<li><strong>Experienced in working with enterprise-level teams on collaborative projects.</strong></li>\n</ul>\n<h2 id=\"WORK-EXPERIENCE\"><a href=\"#WORK-EXPERIENCE\" class=\"headerlink\" title=\"WORK EXPERIENCE\"></a>WORK EXPERIENCE</h2><p>2021.06 - 2023.08   \tShanghai Tuhu Information Technology, Senior Engineer</p>\n<p>2019.08 - 2021.06    \tZhongAn Insurance, Senior Engineer</p>\n<p>2017.03 - 2019.08     \tFront-end Development Engineer in F-Road, Engineer</p>\n<h2 id=\"CONTACT-ME\"><a href=\"#CONTACT-ME\" class=\"headerlink\" title=\"CONTACT ME\"></a>CONTACT ME</h2><p>Email: <a href=\"mailto:&#x79;&#x7a;&#x68;&#x75;&#105;&#121;&#105;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#x6d;\">&#x79;&#x7a;&#x68;&#x75;&#105;&#121;&#105;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#x6d;</a></p>\n","excerpt":"","more":"<h2 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h2><ul>\n<li><strong>Proficient in HTML5 and CSS</strong>: Extensive practice in creating responsive layouts for both mobile and desktop platforms, ensuring optimal user experience across various devices.</li>\n<li><strong>Mastery of JavaScript and Typescript</strong>: Skilled in utilizing the latest ES6 features to write clean, standardized code that adheres to industry best practices.</li>\n<li><strong>Expertise in Vue</strong>: In-depth understanding of the Vue framework, including both Vue 2 and Vue 3. Have studied and analyzed parts of the Vue 3 source code, including reactivity principles and diff algorithms.</li>\n<li><strong>Experience with Build Tools</strong>: Proficient in using Webpack and vite for building and packaging front-end applications, with a deep comprehension of front-end engineering processes and the ability to streamline development workflows using plugins.</li>\n<li><strong>React Development</strong>: Capable of developing engineering projects using React, with a solid understanding of the React ecosystem and hands-on experience in implementing projects from scratch.</li>\n<li><strong>Backend Development Knowledge</strong>: Familiar with Node and the Nest framework, possessing practical experience in back-end development, including the use of Docker and MySQL.</li>\n<li><strong>Git Proficiency</strong>: Skilled in using git for collaborative development, with a track record of managing versions and environments according to standards.</li>\n<li><strong>Experienced in working with enterprise-level teams on collaborative projects.</strong></li>\n</ul>\n<h2 id=\"WORK-EXPERIENCE\"><a href=\"#WORK-EXPERIENCE\" class=\"headerlink\" title=\"WORK EXPERIENCE\"></a>WORK EXPERIENCE</h2><p>2021.06 - 2023.08   \tShanghai Tuhu Information Technology, Senior Engineer</p>\n<p>2019.08 - 2021.06    \tZhongAn Insurance, Senior Engineer</p>\n<p>2017.03 - 2019.08     \tFront-end Development Engineer in F-Road, Engineer</p>\n<h2 id=\"CONTACT-ME\"><a href=\"#CONTACT-ME\" class=\"headerlink\" title=\"CONTACT ME\"></a>CONTACT ME</h2><p>Email: <a href=\"mailto:&#x79;&#x7a;&#x68;&#x75;&#105;&#121;&#105;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#x6d;\">&#x79;&#x7a;&#x68;&#x75;&#105;&#121;&#105;&#64;&#x31;&#x32;&#x36;&#46;&#x63;&#111;&#x6d;</a></p>\n"}],"Post":[{"title":"Traverse-DOM-level-by-level","date":"2024-04-10T07:22:57.000Z","_content":"\n## Problem Description\n\nGiven a DOM tree, flatten it into an one dimensional array, in the order of\nlayer by layer, like below.\n![](https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png)\n\n## The Solution\n\nWe need to traverse it level by level, resulting in this array:  \n`[div, p, p, div, a, img, button]`\n\nThis problem is a typical BFS (Breadth-First Search) problem, which we can solve\nusing a queue. Here's a step-by-step approach:\n\n1. Create a queue and add the root to it.\n\n2. While the queue is not empty, shift the head out and add it to the result.\n\n3. Add the children of the current node to the queue.\n\n4. Repeat steps 2-3 until the queue is empty.\n\n## The resolve\n\n```\nfunction traverseDOM(root) {\n  if (!root) return [];\n\n  const result = [];\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    result.push(current);\n\n    if (current.children) {\n      for (let child of current.children) {\n        queue.push(child);\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\n","source":"_posts/Traverse-DOM-level-by-level.md","raw":"---\ntitle: Traverse-DOM-level-by-level\ndate: 2024-04-10 15:22:57\ntags:\n  - js\n  - tree\n  - algorithm\n---\n\n## Problem Description\n\nGiven a DOM tree, flatten it into an one dimensional array, in the order of\nlayer by layer, like below.\n![](https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png)\n\n## The Solution\n\nWe need to traverse it level by level, resulting in this array:  \n`[div, p, p, div, a, img, button]`\n\nThis problem is a typical BFS (Breadth-First Search) problem, which we can solve\nusing a queue. Here's a step-by-step approach:\n\n1. Create a queue and add the root to it.\n\n2. While the queue is not empty, shift the head out and add it to the result.\n\n3. Add the children of the current node to the queue.\n\n4. Repeat steps 2-3 until the queue is empty.\n\n## The resolve\n\n```\nfunction traverseDOM(root) {\n  if (!root) return [];\n\n  const result = [];\n  const queue = [root];\n\n  while (queue.length > 0) {\n    const current = queue.shift();\n    result.push(current);\n\n    if (current.children) {\n      for (let child of current.children) {\n        queue.push(child);\n      }\n    }\n  }\n\n  return result;\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\n","slug":"Traverse-DOM-level-by-level","published":1,"updated":"2024-04-24T12:14:42.500Z","_id":"clvdje0xl0000xzv9fhpj9ked","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given a DOM tree, flatten it into an one dimensional array, in the order of<br>layer by layer, like below.<br><img src=\"https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png\"></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We need to traverse it level by level, resulting in this array:<br><code>[div, p, p, div, a, img, button]</code></p>\n<p>This problem is a typical BFS (Breadth-First Search) problem, which we can solve<br>using a queue. Here’s a step-by-step approach:</p>\n<ol>\n<li><p>Create a queue and add the root to it.</p>\n</li>\n<li><p>While the queue is not empty, shift the head out and add it to the result.</p>\n</li>\n<li><p>Add the children of the current node to the queue.</p>\n</li>\n<li><p>Repeat steps 2-3 until the queue is empty.</p>\n</li>\n</ol>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">traverseDOM</span><span class=\"params\">(root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"type\">const</span> queue = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> current = queue.<span class=\"built_in\">shift</span>();</span><br><span class=\"line\">    result.<span class=\"built_in\">push</span>(current);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (let child of current.children) &#123;</span><br><span class=\"line\">        queue.<span class=\"built_in\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\">https://bigfrontend.dev/problem/Traverse-DOM-level-by-level</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given a DOM tree, flatten it into an one dimensional array, in the order of<br>layer by layer, like below.<br><img src=\"https://cdn.bfe.dev/bfe/img/ykqFdOIOaXFyn2uZ8h5Lt02sFaYb5eZ8_1063x546_1598232821941.png\"></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We need to traverse it level by level, resulting in this array:<br><code>[div, p, p, div, a, img, button]</code></p>\n<p>This problem is a typical BFS (Breadth-First Search) problem, which we can solve<br>using a queue. Here’s a step-by-step approach:</p>\n<ol>\n<li><p>Create a queue and add the root to it.</p>\n</li>\n<li><p>While the queue is not empty, shift the head out and add it to the result.</p>\n</li>\n<li><p>Add the children of the current node to the queue.</p>\n</li>\n<li><p>Repeat steps 2-3 until the queue is empty.</p>\n</li>\n</ol>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">traverseDOM</span><span class=\"params\">(root)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">const</span> result = [];</span><br><span class=\"line\">  <span class=\"type\">const</span> queue = [root];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> current = queue.<span class=\"built_in\">shift</span>();</span><br><span class=\"line\">    result.<span class=\"built_in\">push</span>(current);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current.children) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (let child of current.children) &#123;</span><br><span class=\"line\">        queue.<span class=\"built_in\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/Traverse-DOM-level-by-level\">https://bigfrontend.dev/problem/Traverse-DOM-level-by-level</a></p>\n</blockquote>\n"},{"title":"decode-message","date":"2024-04-07T08:19:12.000Z","_content":"\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3 stop\n   when cannot neither move down right or up right. the character on the path is\n   the message for the input above, IROCLED should be returned.\n\n**notes** if no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the\nmessage using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning\n   going down).\n4. Use a while loop to loop through from column 0 to the last column and collect\n   the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","source":"_posts/decode-message.md","raw":"---\ntitle: decode-message\ndate: 2024-04-07 16:19:12\ntags:\n  - js\n  - array\n  - algorithm\n---\n\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3 stop\n   when cannot neither move down right or up right. the character on the path is\n   the message for the input above, IROCLED should be returned.\n\n**notes** if no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the\nmessage using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning\n   going down).\n4. Use a while loop to loop through from column 0 to the last column and collect\n   the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","slug":"decode-message","published":1,"updated":"2024-04-24T12:13:16.335Z","_id":"clvdje0xq0001xzv948weegqk","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3 stop<br>when cannot neither move down right or up right. the character on the path is<br>the message for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong> if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll create a function called <code>decode</code> that accepts a 2D array and decodes the<br>message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning<br>going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect<br>the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there’s only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3 stop<br>when cannot neither move down right or up right. the character on the path is<br>the message for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong> if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll create a function called <code>decode</code> that accepts a 2D array and decodes the<br>message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning<br>going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect<br>the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there’s only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"},{"title":"implement-once","date":"2024-04-10T07:58:39.000Z","_content":"\n## Problem Description\n\n\\_.once(func) is used to force a function to be called only once, later calls\nonly returns the result of first call.\n\nCan you implement your own once()?\n\n```\nfunction func(num) {\n  return num\n}\n\nconst onced = once(func)\n\nonced(1)\n// 1, func called with 1\n\nonced(2)\n// 1, even 2 is passed, previous result is returned\n```\n\n## The Solution\n\nload-once is a technique used to ensure that a function is called only once.\nSubsequent calls will return the result of the first call.\n\nSo, we nedd to record whether the function is called and the result. It is an\neasy question. Let's do it.\n\n## The resolve\n\n```\nfunction once(func) {\n    let result = null;\n    let isCalled = false;\n\n    return function(...args) {\n        if(isCalled) {\n            return result;\n        }\n\n        result = func.call(this, ...args);\n        isCalled = true;\n        return result\n    }\n\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/implement-once\n","source":"_posts/implement-once.md","raw":"---\ntitle: implement-once\ndate: 2024-04-10 15:58:39\ntags:\n  - js\n  - algorithm\n---\n\n## Problem Description\n\n\\_.once(func) is used to force a function to be called only once, later calls\nonly returns the result of first call.\n\nCan you implement your own once()?\n\n```\nfunction func(num) {\n  return num\n}\n\nconst onced = once(func)\n\nonced(1)\n// 1, func called with 1\n\nonced(2)\n// 1, even 2 is passed, previous result is returned\n```\n\n## The Solution\n\nload-once is a technique used to ensure that a function is called only once.\nSubsequent calls will return the result of the first call.\n\nSo, we nedd to record whether the function is called and the result. It is an\neasy question. Let's do it.\n\n## The resolve\n\n```\nfunction once(func) {\n    let result = null;\n    let isCalled = false;\n\n    return function(...args) {\n        if(isCalled) {\n            return result;\n        }\n\n        result = func.call(this, ...args);\n        isCalled = true;\n        return result\n    }\n\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/implement-once\n","slug":"implement-once","published":1,"updated":"2024-04-24T12:14:00.072Z","_id":"clvdje0xs0002xzv92qbn4gmg","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>_.once(func) is used to force a function to be called only once, later calls<br>only returns the result of first call.</p>\n<p>Can you implement your own once()?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">func</span>(num) &#123;</span><br><span class=\"line\">  return num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const onced = <span class=\"built_in\">once</span>(func)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">onced</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"comment\">// 1, func called with 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">onced</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span></span><br><span class=\"line\"><span class=\"comment\">// 1, even 2 is passed, previous result is returned</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>load-once is a technique used to ensure that a function is called only once.<br>Subsequent calls will return the result of the first call.</p>\n<p>So, we nedd to record whether the function is called and the result. It is an<br>easy question. Let’s do it.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">once</span><span class=\"params\">(func)</span> &#123;</span><br><span class=\"line\">    let result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    let isCalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result = func.call(<span class=\"keyword\">this</span>, ...args);</span><br><span class=\"line\">        isCalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/implement-once\">https://bigfrontend.dev/problem/implement-once</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>_.once(func) is used to force a function to be called only once, later calls<br>only returns the result of first call.</p>\n<p>Can you implement your own once()?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">func</span>(num) &#123;</span><br><span class=\"line\">  return num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const onced = <span class=\"built_in\">once</span>(func)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">onced</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"comment\">// 1, func called with 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">onced</span><span class=\"params\">(<span class=\"number\">2</span>)</span></span></span><br><span class=\"line\"><span class=\"comment\">// 1, even 2 is passed, previous result is returned</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>load-once is a technique used to ensure that a function is called only once.<br>Subsequent calls will return the result of the first call.</p>\n<p>So, we nedd to record whether the function is called and the result. It is an<br>easy question. Let’s do it.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">once</span><span class=\"params\">(func)</span> &#123;</span><br><span class=\"line\">    let result = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    let isCalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        result = func.call(<span class=\"keyword\">this</span>, ...args);</span><br><span class=\"line\">        isCalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/implement-once\">https://bigfrontend.dev/problem/implement-once</a></p>\n</blockquote>\n"},{"title":"detect-data-type","date":"2024-04-07T09:44:30.000Z","_content":"\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in\nJavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data\ntype including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the\nproblem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object\n   type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the\n   extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect\n   the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","source":"_posts/detect-data-type.md","raw":"---\ntitle: detect-data-type\ndate: 2024-04-07 17:44:30\ntags:\n  - js\n  - algorithm\n---\n\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in\nJavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data\ntype including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the\nproblem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object\n   type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the\n   extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect\n   the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","slug":"detect-data-type","published":1,"updated":"2024-04-24T12:13:44.489Z","_id":"clvdje0xu0004xzv94rr83wg1","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in<br>JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data<br>type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the<br>problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object<br>type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the<br>extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect<br>the result.</li>\n<li>if the type is in the set, we return it. Or we return ‘object’</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in<br>JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data<br>type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the<br>problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object<br>type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the<br>extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect<br>the result.</li>\n<li>if the type is in the set, we return it. Or we return ‘object’</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"},{"title":"find-the-largest-difference","date":"2024-04-10T07:40:04.000Z","_content":"\n## Problem Description\n\nGiven an array of numbers, pick any two numbers a and b, we could get the\ndifference by Math.abs(a - b).\n\nCan you write a function to get the largest difference?\n\n```\nlargestDiff([-1, 2,3,10, 9])\n// 11, obviously Math.abs(-1 - 10) is the largest\n\nlargestDiff([])\n// 0\n\nlargestDiff([1])\n// 0\n```\n\n## The Solution\n\nwe're given an array of numbers. The task is to pick any two numbers, find the\ndifference, and determine the largest difference. Here's how we can tackle this\nproblem:\n\nFirst, let's write a function to calculate the largest difference. We'll need to\nhandle an edge case: if the length of the array is zero, return 0.\n\nNext, we can calculate the difference between the maximum and minimum values. In\njust two lines of code, we can accomplish this with:\n\n```\n    if (array.length == 0) {\n        return 0\n    } else {\n        return max(array) - min(array)\n    }\n```\n\nSecond， if we are not allowed to use Math.min() and Math.max(), we can use loop\nto find the max and min and then get the result.\n\nTo do this, we'll keep track of the minimum with a value of infinity, and set\nthe initial value for max to negative infinity.\n\nThe we use the loop function to compare the number one by one and calculate the\nresult.\n\n## The resolve\n\n```\nfunction largestDiff(arr) {\n  if (!arr.length) {\n    return 0;\n  }\n  let min = Infinity;\n  let max = - Infinity;\n  let result = - Infinity;\n\n  for (let item in arr) {\n    if (item < min) {\n      min = item;\n      result = max - min;\n    }\n    if (item > max) {\n      max = item;\n      result = max -min;\n    }\n  }\n\n  return result;\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/Find-the-largest-difference\n","source":"_posts/find-the-largest-difference.md","raw":"---\ntitle: find-the-largest-difference\ndate: 2024-04-10 15:40:04\ntags:\n  - js\n  - algorithm\n---\n\n## Problem Description\n\nGiven an array of numbers, pick any two numbers a and b, we could get the\ndifference by Math.abs(a - b).\n\nCan you write a function to get the largest difference?\n\n```\nlargestDiff([-1, 2,3,10, 9])\n// 11, obviously Math.abs(-1 - 10) is the largest\n\nlargestDiff([])\n// 0\n\nlargestDiff([1])\n// 0\n```\n\n## The Solution\n\nwe're given an array of numbers. The task is to pick any two numbers, find the\ndifference, and determine the largest difference. Here's how we can tackle this\nproblem:\n\nFirst, let's write a function to calculate the largest difference. We'll need to\nhandle an edge case: if the length of the array is zero, return 0.\n\nNext, we can calculate the difference between the maximum and minimum values. In\njust two lines of code, we can accomplish this with:\n\n```\n    if (array.length == 0) {\n        return 0\n    } else {\n        return max(array) - min(array)\n    }\n```\n\nSecond， if we are not allowed to use Math.min() and Math.max(), we can use loop\nto find the max and min and then get the result.\n\nTo do this, we'll keep track of the minimum with a value of infinity, and set\nthe initial value for max to negative infinity.\n\nThe we use the loop function to compare the number one by one and calculate the\nresult.\n\n## The resolve\n\n```\nfunction largestDiff(arr) {\n  if (!arr.length) {\n    return 0;\n  }\n  let min = Infinity;\n  let max = - Infinity;\n  let result = - Infinity;\n\n  for (let item in arr) {\n    if (item < min) {\n      min = item;\n      result = max - min;\n    }\n    if (item > max) {\n      max = item;\n      result = max -min;\n    }\n  }\n\n  return result;\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/Find-the-largest-difference\n","slug":"find-the-largest-difference","published":1,"updated":"2024-04-24T12:13:53.563Z","_id":"clvdje0xv0005xzv91qa93lq8","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given an array of numbers, pick any two numbers a and b, we could get the<br>difference by Math.abs(a - b).</p>\n<p>Can you write a function to get the largest difference?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([-<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>, <span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 11, obviously Math.abs(-1 - 10) is the largest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([<span class=\"number\">1</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>we’re given an array of numbers. The task is to pick any two numbers, find the<br>difference, and determine the largest difference. Here’s how we can tackle this<br>problem:</p>\n<p>First, let’s write a function to calculate the largest difference. We’ll need to<br>handle an edge case: if the length of the array is zero, return 0.</p>\n<p>Next, we can calculate the difference between the maximum and minimum values. In<br>just two lines of code, we can accomplish this with:</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">array</span>) - <span class=\"built_in\">min</span>(<span class=\"built_in\">array</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Second， if we are not allowed to use Math.min() and Math.max(), we can use loop<br>to find the max and min and then get the result.</p>\n<p>To do this, we’ll keep track of the minimum with a value of infinity, and set<br>the initial value for max to negative infinity.</p>\n<p>The we use the loop function to compare the number one by one and calculate the<br>result.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> largestDiff(arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> min</span> = Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> max</span> = - Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = - Infinity;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"type\">item</span> <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &lt;<span class=\"built_in\"> min</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> min</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -<span class=\"built_in\"> min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &gt;<span class=\"built_in\"> max</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> max</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/Find-the-largest-difference\">https://bigfrontend.dev/problem/Find-the-largest-difference</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Given an array of numbers, pick any two numbers a and b, we could get the<br>difference by Math.abs(a - b).</p>\n<p>Can you write a function to get the largest difference?</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([-<span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>, <span class=\"number\">9</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 11, obviously Math.abs(-1 - 10) is the largest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">largestDiff</span><span class=\"params\">([<span class=\"number\">1</span>])</span></span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>we’re given an array of numbers. The task is to pick any two numbers, find the<br>difference, and determine the largest difference. Here’s how we can tackle this<br>problem:</p>\n<p>First, let’s write a function to calculate the largest difference. We’ll need to<br>handle an edge case: if the length of the array is zero, return 0.</p>\n<p>Next, we can calculate the difference between the maximum and minimum values. In<br>just two lines of code, we can accomplish this with:</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">array</span>) - <span class=\"built_in\">min</span>(<span class=\"built_in\">array</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Second， if we are not allowed to use Math.min() and Math.max(), we can use loop<br>to find the max and min and then get the result.</p>\n<p>To do this, we’ll keep track of the minimum with a value of infinity, and set<br>the initial value for max to negative infinity.</p>\n<p>The we use the loop function to compare the number one by one and calculate the<br>result.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> largestDiff(arr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> min</span> = Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span><span class=\"built_in\"> max</span> = - Infinity;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = - Infinity;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> <span class=\"type\">item</span> <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &lt;<span class=\"built_in\"> min</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> min</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -<span class=\"built_in\"> min</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"type\">item</span> &gt;<span class=\"built_in\"> max</span>) &#123;</span><br><span class=\"line\">     <span class=\"built_in\"> max</span> = <span class=\"type\">item</span>;</span><br><span class=\"line\">      result =<span class=\"built_in\"> max</span> -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/Find-the-largest-difference\">https://bigfrontend.dev/problem/Find-the-largest-difference</a></p>\n</blockquote>\n"},{"title":"improve-a-function","date":"2024-04-10T02:41:07.000Z","_content":"\n## Problem Description\n\n```\n// Given an input of array,\n// which is made of items with >= 3 properties\n\nlet items = [\n  {color: 'red', type: 'tv', age: 18},\n  {color: 'silver', type: 'phone', age: 20},\n  {color: 'blue', type: 'book', age: 17}\n]\n\n// an exclude array made of key value pair\nconst excludes = [\n  {k: 'color', v: 'silver'},\n  {k: 'type', v: 'tv'},\n  ...\n]\n\nfunction excludeItems(items, excludes) {\n  excludes.forEach( pair => {\n    items = items.filter(item => item[pair.k] === item[pair.v])\n  })\n\n  return items\n}\n```\n\n1. What does this function excludeItems do?\n\n2. Is this function working as expected ?\n\n3. What is the time complexity of this function?\n\n4. How would you optimize it ?\n\n## The Solution\n\nOur task is to filter the items based on the conditions specified in the\n\"exclude\" array. For example, if the conditions are {\"color\": \"silver\"} and\n{\"type\": \"TV\"}, then the item that matches both conditions (i.e., a silver TV)\nwould be excluded.\n\nBut, as we'll see, there's a typo in the function that prevents it from working\nas expected.\n\nThe first thing we need to do is fix the typo in the function. Instead of\nexcluding items that match the conditions, the function is currently excluding\nitems that don't match the conditions. To fix this, we need to change the `!==`\noperator to `===` in the if statement. Also the condition should be\n`item[pair.k] !== pair.v`\n\nThe optimized version of the excludeItems function still has a time complexity\nof O(n \\* m), where n is the number of items in the items array and m is the\nnumber of key-value pairs in the excludes array. However, the optimization lies\nin the fact that it only iterates over the items array once, regardless of the\nnumber of key-value pairs in the excludes array.\n\nThe optimization involves creating a set of excluded properties and values\nfirst, and then filtering the items array based on this set. By doing so, it\navoids iterating over the entire items array multiple times, which was the case\nin the original implementation.\n\nThe optimized version achieves better performance by iterating over the items\narray only once and using a set to efficiently check for excluded properties and\nvalues. This approach reduces the number of iterations and comparisons needed to\nfilter the items, leading to improved efficiency compared to the original\nimplementation.\n\n## The resolve\n\n```\nfunction excludeItems(items, exclude) {\n  const excludeMap = new Map();\n  for (const condition of exclude) {\n    const {key, value} = condition;\n    if (!excludeMap.has(key)) {\n      excludeMap.set(key, new Set());\n    }\n    excludeMap.get(key).add(value);\n  }\n\n  return items.filter(item => {\n    for (const [key, valueSet] of excludeMap.entries()) {\n      if (valueSet.has(item[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/improve-a-function\n","source":"_posts/improve-a-function.md","raw":"---\ntitle: improve-a-function\ndate: 2024-04-10 10:41:07\ntags:\n  - js\n  - algorithm\n---\n\n## Problem Description\n\n```\n// Given an input of array,\n// which is made of items with >= 3 properties\n\nlet items = [\n  {color: 'red', type: 'tv', age: 18},\n  {color: 'silver', type: 'phone', age: 20},\n  {color: 'blue', type: 'book', age: 17}\n]\n\n// an exclude array made of key value pair\nconst excludes = [\n  {k: 'color', v: 'silver'},\n  {k: 'type', v: 'tv'},\n  ...\n]\n\nfunction excludeItems(items, excludes) {\n  excludes.forEach( pair => {\n    items = items.filter(item => item[pair.k] === item[pair.v])\n  })\n\n  return items\n}\n```\n\n1. What does this function excludeItems do?\n\n2. Is this function working as expected ?\n\n3. What is the time complexity of this function?\n\n4. How would you optimize it ?\n\n## The Solution\n\nOur task is to filter the items based on the conditions specified in the\n\"exclude\" array. For example, if the conditions are {\"color\": \"silver\"} and\n{\"type\": \"TV\"}, then the item that matches both conditions (i.e., a silver TV)\nwould be excluded.\n\nBut, as we'll see, there's a typo in the function that prevents it from working\nas expected.\n\nThe first thing we need to do is fix the typo in the function. Instead of\nexcluding items that match the conditions, the function is currently excluding\nitems that don't match the conditions. To fix this, we need to change the `!==`\noperator to `===` in the if statement. Also the condition should be\n`item[pair.k] !== pair.v`\n\nThe optimized version of the excludeItems function still has a time complexity\nof O(n \\* m), where n is the number of items in the items array and m is the\nnumber of key-value pairs in the excludes array. However, the optimization lies\nin the fact that it only iterates over the items array once, regardless of the\nnumber of key-value pairs in the excludes array.\n\nThe optimization involves creating a set of excluded properties and values\nfirst, and then filtering the items array based on this set. By doing so, it\navoids iterating over the entire items array multiple times, which was the case\nin the original implementation.\n\nThe optimized version achieves better performance by iterating over the items\narray only once and using a set to efficiently check for excluded properties and\nvalues. This approach reduces the number of iterations and comparisons needed to\nfilter the items, leading to improved efficiency compared to the original\nimplementation.\n\n## The resolve\n\n```\nfunction excludeItems(items, exclude) {\n  const excludeMap = new Map();\n  for (const condition of exclude) {\n    const {key, value} = condition;\n    if (!excludeMap.has(key)) {\n      excludeMap.set(key, new Set());\n    }\n    excludeMap.get(key).add(value);\n  }\n\n  return items.filter(item => {\n    for (const [key, valueSet] of excludeMap.entries()) {\n      if (valueSet.has(item[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/improve-a-function\n","slug":"improve-a-function","published":1,"updated":"2024-04-24T12:14:05.715Z","_id":"clvdje0xv0006xzv9apuc48nd","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Given <span class=\"keyword\">an</span> <span class=\"built_in\">input</span> of array,</span><br><span class=\"line\">// which <span class=\"keyword\">is</span> made of <span class=\"built_in\">items</span> with &gt;= <span class=\"number\">3</span> properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">items</span> = [</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;tv&#x27;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;silver&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;phone&#x27;</span>, age: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;book&#x27;</span>, age: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">an</span> exclude array made of key value pair</span><br><span class=\"line\">const excludes = [</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;color&#x27;</span>, v: <span class=\"string\">&#x27;silver&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;type&#x27;</span>, v: <span class=\"string\">&#x27;tv&#x27;</span>&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">excludeItems</span><span class=\"params\">(items, excludes)</span> &#123;</span><br><span class=\"line\">  excludes.forEach( pair =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">items</span> = <span class=\"built_in\">items</span>.<span class=\"built_in\">filter</span>(item =&gt; item[pair.<span class=\"keyword\">k</span>] === item[pair.v])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>What does this function excludeItems do?</p>\n</li>\n<li><p>Is this function working as expected ?</p>\n</li>\n<li><p>What is the time complexity of this function?</p>\n</li>\n<li><p>How would you optimize it ?</p>\n</li>\n</ol>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our task is to filter the items based on the conditions specified in the<br>“exclude” array. For example, if the conditions are {“color”: “silver”} and<br>{“type”: “TV”}, then the item that matches both conditions (i.e., a silver TV)<br>would be excluded.</p>\n<p>But, as we’ll see, there’s a typo in the function that prevents it from working<br>as expected.</p>\n<p>The first thing we need to do is fix the typo in the function. Instead of<br>excluding items that match the conditions, the function is currently excluding<br>items that don’t match the conditions. To fix this, we need to change the <code>!==</code><br>operator to <code>===</code> in the if statement. Also the condition should be<br><code>item[pair.k] !== pair.v</code></p>\n<p>The optimized version of the excludeItems function still has a time complexity<br>of O(n * m), where n is the number of items in the items array and m is the<br>number of key-value pairs in the excludes array. However, the optimization lies<br>in the fact that it only iterates over the items array once, regardless of the<br>number of key-value pairs in the excludes array.</p>\n<p>The optimization involves creating a set of excluded properties and values<br>first, and then filtering the items array based on this set. By doing so, it<br>avoids iterating over the entire items array multiple times, which was the case<br>in the original implementation.</p>\n<p>The optimized version achieves better performance by iterating over the items<br>array only once and using a set to efficiently check for excluded properties and<br>values. This approach reduces the number of iterations and comparisons needed to<br>filter the items, leading to improved efficiency compared to the original<br>implementation.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">excludeItems</span>(items, exclude) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> excludeMap = <span class=\"keyword\">new </span><span class=\"class title_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> condition of exclude) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;<span class=\"built_in\">key</span>, value&#125; = condition;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!excludeMap.<span class=\"property\">has</span>(<span class=\"built_in\">key</span>)) &#123;</span><br><span class=\"line\">      excludeMap.<span class=\"property\">set</span>(<span class=\"built_in\">key</span>, <span class=\"keyword\">new </span><span class=\"class title_\">Set</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    excludeMap.<span class=\"property\">get</span>(<span class=\"built_in\">key</span>).<span class=\"property\">add</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items.<span class=\"property\">filter</span>(item =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [<span class=\"built_in\">key</span>, valueSet] of excludeMap.<span class=\"property\">entries</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valueSet.<span class=\"property\">has</span>(item[<span class=\"built_in\">key</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/improve-a-function\">https://bigfrontend.dev/problem/improve-a-function</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Given <span class=\"keyword\">an</span> <span class=\"built_in\">input</span> of array,</span><br><span class=\"line\">// which <span class=\"keyword\">is</span> made of <span class=\"built_in\">items</span> with &gt;= <span class=\"number\">3</span> properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">items</span> = [</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;tv&#x27;</span>, age: <span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;silver&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;phone&#x27;</span>, age: <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">  &#123;color: <span class=\"string\">&#x27;blue&#x27;</span>, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;book&#x27;</span>, age: <span class=\"number\">17</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// <span class=\"keyword\">an</span> exclude array made of key value pair</span><br><span class=\"line\">const excludes = [</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;color&#x27;</span>, v: <span class=\"string\">&#x27;silver&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"keyword\">k</span>: <span class=\"string\">&#x27;type&#x27;</span>, v: <span class=\"string\">&#x27;tv&#x27;</span>&#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">excludeItems</span><span class=\"params\">(items, excludes)</span> &#123;</span><br><span class=\"line\">  excludes.forEach( pair =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">items</span> = <span class=\"built_in\">items</span>.<span class=\"built_in\">filter</span>(item =&gt; item[pair.<span class=\"keyword\">k</span>] === item[pair.v])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>What does this function excludeItems do?</p>\n</li>\n<li><p>Is this function working as expected ?</p>\n</li>\n<li><p>What is the time complexity of this function?</p>\n</li>\n<li><p>How would you optimize it ?</p>\n</li>\n</ol>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our task is to filter the items based on the conditions specified in the<br>“exclude” array. For example, if the conditions are {“color”: “silver”} and<br>{“type”: “TV”}, then the item that matches both conditions (i.e., a silver TV)<br>would be excluded.</p>\n<p>But, as we’ll see, there’s a typo in the function that prevents it from working<br>as expected.</p>\n<p>The first thing we need to do is fix the typo in the function. Instead of<br>excluding items that match the conditions, the function is currently excluding<br>items that don’t match the conditions. To fix this, we need to change the <code>!==</code><br>operator to <code>===</code> in the if statement. Also the condition should be<br><code>item[pair.k] !== pair.v</code></p>\n<p>The optimized version of the excludeItems function still has a time complexity<br>of O(n * m), where n is the number of items in the items array and m is the<br>number of key-value pairs in the excludes array. However, the optimization lies<br>in the fact that it only iterates over the items array once, regardless of the<br>number of key-value pairs in the excludes array.</p>\n<p>The optimization involves creating a set of excluded properties and values<br>first, and then filtering the items array based on this set. By doing so, it<br>avoids iterating over the entire items array multiple times, which was the case<br>in the original implementation.</p>\n<p>The optimized version achieves better performance by iterating over the items<br>array only once and using a set to efficiently check for excluded properties and<br>values. This approach reduces the number of iterations and comparisons needed to<br>filter the items, leading to improved efficiency compared to the original<br>implementation.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"title function_\">excludeItems</span>(items, exclude) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> excludeMap = <span class=\"keyword\">new </span><span class=\"class title_\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> condition of exclude) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;<span class=\"built_in\">key</span>, value&#125; = condition;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!excludeMap.<span class=\"property\">has</span>(<span class=\"built_in\">key</span>)) &#123;</span><br><span class=\"line\">      excludeMap.<span class=\"property\">set</span>(<span class=\"built_in\">key</span>, <span class=\"keyword\">new </span><span class=\"class title_\">Set</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    excludeMap.<span class=\"property\">get</span>(<span class=\"built_in\">key</span>).<span class=\"property\">add</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items.<span class=\"property\">filter</span>(item =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [<span class=\"built_in\">key</span>, valueSet] of excludeMap.<span class=\"property\">entries</span>()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (valueSet.<span class=\"property\">has</span>(item[<span class=\"built_in\">key</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/improve-a-function\">https://bigfrontend.dev/problem/improve-a-function</a></p>\n</blockquote>\n"},{"title":"promisify","date":"2024-04-10T08:24:31.000Z","_content":"\n## Problem Description\n\nLet's take a look at following error-first callback.\n\n```\nconst callback = (error, data) => {\n  if (error) {\n    // handle the error\n  } else {\n    // handle the data\n  }\n}\n```\n\nNow think about async functions that takes above error-first callback as last\nargument.\n\n```\nconst func = (arg1, arg2, callback) => {\n  // some async logic\n  if (hasError) {\n    callback(someError)\n  } else {\n    callback(null, someData)\n  }\n}\n```\n\nYou see what needs to be done now. Please implement promisify() to make the code\nbetter.\n\n```\nconst promisedFunc = promisify(func)\n\npromisedFunc().then((data) => {\n  // handles data\n}).catch((error) => {\n  // handles error\n})\n\n```\n\n## The Solution\n\nOur goal is to convert this callback-based function into a promise-based one.\n\nThe promisify function converts the error-first callback pattern to a\npromise-based API. It returns a new function that produces a promise. When the\npromise is resolved, we get the data. If it's rejected, it has the error.\n\n## The resolve\n\n```\n/**\n * @param {(...args) => void} func\n * @returns {(...args) => Promise<any}\n */\nfunction promisify(func) {\n  return function(...args) {\n    return new Promise((resolve, reject) =>{\n    func.call(this, ...args, (error, data) => {\n      if(error) {\n        reject(error)\n      } else {\n        resolve(data)\n      }\n    })\n  })\n  }\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/promisify\n","source":"_posts/promisify.md","raw":"---\ntitle: promisify\ndate: 2024-04-10 16:24:31\ntags:\n  - js\n  - algorithm\n---\n\n## Problem Description\n\nLet's take a look at following error-first callback.\n\n```\nconst callback = (error, data) => {\n  if (error) {\n    // handle the error\n  } else {\n    // handle the data\n  }\n}\n```\n\nNow think about async functions that takes above error-first callback as last\nargument.\n\n```\nconst func = (arg1, arg2, callback) => {\n  // some async logic\n  if (hasError) {\n    callback(someError)\n  } else {\n    callback(null, someData)\n  }\n}\n```\n\nYou see what needs to be done now. Please implement promisify() to make the code\nbetter.\n\n```\nconst promisedFunc = promisify(func)\n\npromisedFunc().then((data) => {\n  // handles data\n}).catch((error) => {\n  // handles error\n})\n\n```\n\n## The Solution\n\nOur goal is to convert this callback-based function into a promise-based one.\n\nThe promisify function converts the error-first callback pattern to a\npromise-based API. It returns a new function that produces a promise. When the\npromise is resolved, we get the data. If it's rejected, it has the error.\n\n## The resolve\n\n```\n/**\n * @param {(...args) => void} func\n * @returns {(...args) => Promise<any}\n */\nfunction promisify(func) {\n  return function(...args) {\n    return new Promise((resolve, reject) =>{\n    func.call(this, ...args, (error, data) => {\n      if(error) {\n        reject(error)\n      } else {\n        resolve(data)\n      }\n    })\n  })\n  }\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/promisify\n","slug":"promisify","published":1,"updated":"2024-04-24T12:14:27.683Z","_id":"clvdje0xw0008xzv9d216hpmt","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Let’s take a look at following error-first callback.</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const callback = <span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>, data)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">error</span>) &#123;</span><br><span class=\"line\">    // handle the <span class=\"built_in\">error</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    // handle the data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now think about async functions that takes above error-first callback as last<br>argument.</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const func = <span class=\"function\"><span class=\"params\">(arg1, arg2, callback)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> some <span class=\"keyword\">async</span> logic</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasError) &#123;</span><br><span class=\"line\">    callback(someError)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, someData)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You see what needs to be done now. Please implement promisify() to make the code<br>better.</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promisedFunc = promisify(func)</span><br><span class=\"line\"></span><br><span class=\"line\">promisedFunc().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(data)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  // handles data</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  // handles <span class=\"built_in\">error</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our goal is to convert this callback-based function into a promise-based one.</p>\n<p>The promisify function converts the error-first callback pattern to a<br>promise-based API. It returns a new function that produces a promise. When the<br>promise is resolved, we get the data. If it’s rejected, it has the error.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(...args) =&gt; void&#125; func</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;(...args) =&gt; Promise&lt;any&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promisify</span><span class=\"params\">(func)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>, ...args, (error, data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/promisify\">https://bigfrontend.dev/problem/promisify</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Let’s take a look at following error-first callback.</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const callback = <span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>, data)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">error</span>) &#123;</span><br><span class=\"line\">    // handle the <span class=\"built_in\">error</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    // handle the data</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now think about async functions that takes above error-first callback as last<br>argument.</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const func = <span class=\"function\"><span class=\"params\">(arg1, arg2, callback)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span> some <span class=\"keyword\">async</span> logic</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasError) &#123;</span><br><span class=\"line\">    callback(someError)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, someData)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You see what needs to be done now. Please implement promisify() to make the code<br>better.</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const promisedFunc = promisify(func)</span><br><span class=\"line\"></span><br><span class=\"line\">promisedFunc().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"params\">(data)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  // handles data</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>)</span> =&gt;</span> &#123;</span><br><span class=\"line\">  // handles <span class=\"built_in\">error</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Our goal is to convert this callback-based function into a promise-based one.</p>\n<p>The promisify function converts the error-first callback pattern to a<br>promise-based API. It returns a new function that produces a promise. When the<br>promise is resolved, we get the data. If it’s rejected, it has the error.</p>\n<h2 id=\"The-resolve\"><a href=\"#The-resolve\" class=\"headerlink\" title=\"The resolve\"></a>The resolve</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(...args) =&gt; void&#125; func</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;(...args) =&gt; Promise&lt;any&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">promisify</span><span class=\"params\">(func)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span><span class=\"params\">(<span class=\"rest_arg\">...args</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Promise((resolve, reject) =&gt;&#123;</span><br><span class=\"line\">    func.call(<span class=\"keyword\">this</span>, ...args, (error, data) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(data)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/promisify\">https://bigfrontend.dev/problem/promisify</a></p>\n</blockquote>\n"},{"title":"this","date":"2024-04-09T07:44:19.000Z","_content":"\n## Problem Description\n\nWhat does the code snippet to the output by `console.log`\n\n```\nconst obj = {\n\ta: 1,\n\tb: function () {\n\t\tconsole.log(this.a);\n\t},\n\tc() {\n\t\tconsole.log(this.a);\n\t},\n\td: () => {\n\t\tconsole.log(this.a);\n\t},\n\te: (function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t})(),\n\tf: function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t},\n};\n\n\tconsole.log(obj.a);\n\tobj.b();\n\t;(obj.b)();\n\n\tconst b = obj.b;\n\tb();\n\tobj.b.apply({ a: 2 });\n\tobj.c();\n\tobj.d();\n\t;(obj.d)();\n\tobj.d.apply({ a: 2 });\n\tobj.e();\n\t;(obj.e)();\n\tobj.e.call({ a: 2 });\n\tobj.f()();\n\t;(obj.f())();\n\tobj.f().call({ a: 2 });\n```\n\n## The Solution\n\n- `const b = obj.b; b(); // undefined`\n\n  lose this binding\n\n- `obj.b.apply({ a: 2 }); `\n\n  this will be altered into `{a:2}`, note that the origin `obj.a` will not be\n  altered.\n\n- `obj.c(); //1`\n\n- `obj.d(); // undefined`\n\n  arrow function, this is actually window\n\n- `;(obj.d)(); // undefined`\n\n- `obj.d.apply({ a: 2 }); // undefined`\n\n  This behavior occurs because `obj.d` is an arrow function. Arrow functions do\n  not bind their own this context but inherit it from the surrounding lexical\n  context where they were defined. In this case, since `obj.d` is defined within\n  the object `obj`, the arrow function `d` retains the this value from the\n  surrounding context, which is the global object.\n\n- `obj.e();` `;(obj.e)();` `obj.e.call({ a: 2 });`\n\n  In the case of `obj.e`, the arrow function is created inside _ an immediately\n  invoked function expression (IIFE) _. Arrow functions inherit this from the\n  surrounding lexical context where they are defined. In this scenario, the\n  arrow function inside `obj.e` will capture the this value of the surrounding\n  context, which is the global object (typically window in a browser\n  environment).\n\n  Therefore, when `obj.e` is invoked, the this keyword inside the arrow function\n  will refer to the global object, maintaining the same this reference as the\n  surrounding context where the arrow function was defined.\n\n  In summary, when executing `obj.e`, the this keyword inside the arrow function\n  defined within `obj.e` will point to the global object (window in a browser\n  environment) due to the lexical scoping behavior of arrow functions.\n  immediately function, return the arrow function just as the `d()`, so this is\n  also points to the Window\n\n- `obj.f()(); ` `;(obj.f())();` `obj.f().call({ a: 2 });`\n\n  When invoking `obj.f()()`, the this keyword inside the arrow function returned\n  by `obj.f() ` will refer to the object `obj`. This behavior occurs because the\n  arrow function inherits its this value from the surrounding lexical context\n  where it was defined, which is the object `obj` in this case.\n\n  Therefore, when `obj.f()()` is executed, the this keyword inside the arrow\n  function will maintain its reference to the object `obj`, as it inherits the\n  this value from the lexical scope in which it was created.\n\n  In summary, when calling `obj.f()()`, the this keyword inside the arrow\n  function returned by `obj.f()` will point to the object obj.\n\n## The result\n\n```javascript\n// 1\nconsole.log(obj.a);\n\n//1\nobj.b();\n\n//1\nobj.b();\n\n// undefined\nconst b = obj.b;\nb();\n\n// 2\nobj.b.apply({ a: 2 });\n\n// 1\nobj.c();\n\n// undefined\nobj.d();\nobj.d();\nobj.d.apply({ a: 2 });\n\n// undefined\nobj.e();\nobj.e();\nobj.e.call({ a: 2 });\n\n// 1\nobj.f()();\n// 1\nobj.f()();\n\n// 1\nobj.f().call({ a: 2 });\n```\n\n> 该题目来自https://bigfrontend.dev/quiz/this\n","source":"_posts/this.md","raw":"---\ntitle: this\ndate: 2024-04-09 15:44:19\ntags:\n  - js\n  - this\n---\n\n## Problem Description\n\nWhat does the code snippet to the output by `console.log`\n\n```\nconst obj = {\n\ta: 1,\n\tb: function () {\n\t\tconsole.log(this.a);\n\t},\n\tc() {\n\t\tconsole.log(this.a);\n\t},\n\td: () => {\n\t\tconsole.log(this.a);\n\t},\n\te: (function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t})(),\n\tf: function () {\n\t\treturn () => {\n\t\t\tconsole.log(this.a);\n\t\t};\n\t},\n};\n\n\tconsole.log(obj.a);\n\tobj.b();\n\t;(obj.b)();\n\n\tconst b = obj.b;\n\tb();\n\tobj.b.apply({ a: 2 });\n\tobj.c();\n\tobj.d();\n\t;(obj.d)();\n\tobj.d.apply({ a: 2 });\n\tobj.e();\n\t;(obj.e)();\n\tobj.e.call({ a: 2 });\n\tobj.f()();\n\t;(obj.f())();\n\tobj.f().call({ a: 2 });\n```\n\n## The Solution\n\n- `const b = obj.b; b(); // undefined`\n\n  lose this binding\n\n- `obj.b.apply({ a: 2 }); `\n\n  this will be altered into `{a:2}`, note that the origin `obj.a` will not be\n  altered.\n\n- `obj.c(); //1`\n\n- `obj.d(); // undefined`\n\n  arrow function, this is actually window\n\n- `;(obj.d)(); // undefined`\n\n- `obj.d.apply({ a: 2 }); // undefined`\n\n  This behavior occurs because `obj.d` is an arrow function. Arrow functions do\n  not bind their own this context but inherit it from the surrounding lexical\n  context where they were defined. In this case, since `obj.d` is defined within\n  the object `obj`, the arrow function `d` retains the this value from the\n  surrounding context, which is the global object.\n\n- `obj.e();` `;(obj.e)();` `obj.e.call({ a: 2 });`\n\n  In the case of `obj.e`, the arrow function is created inside _ an immediately\n  invoked function expression (IIFE) _. Arrow functions inherit this from the\n  surrounding lexical context where they are defined. In this scenario, the\n  arrow function inside `obj.e` will capture the this value of the surrounding\n  context, which is the global object (typically window in a browser\n  environment).\n\n  Therefore, when `obj.e` is invoked, the this keyword inside the arrow function\n  will refer to the global object, maintaining the same this reference as the\n  surrounding context where the arrow function was defined.\n\n  In summary, when executing `obj.e`, the this keyword inside the arrow function\n  defined within `obj.e` will point to the global object (window in a browser\n  environment) due to the lexical scoping behavior of arrow functions.\n  immediately function, return the arrow function just as the `d()`, so this is\n  also points to the Window\n\n- `obj.f()(); ` `;(obj.f())();` `obj.f().call({ a: 2 });`\n\n  When invoking `obj.f()()`, the this keyword inside the arrow function returned\n  by `obj.f() ` will refer to the object `obj`. This behavior occurs because the\n  arrow function inherits its this value from the surrounding lexical context\n  where it was defined, which is the object `obj` in this case.\n\n  Therefore, when `obj.f()()` is executed, the this keyword inside the arrow\n  function will maintain its reference to the object `obj`, as it inherits the\n  this value from the lexical scope in which it was created.\n\n  In summary, when calling `obj.f()()`, the this keyword inside the arrow\n  function returned by `obj.f()` will point to the object obj.\n\n## The result\n\n```javascript\n// 1\nconsole.log(obj.a);\n\n//1\nobj.b();\n\n//1\nobj.b();\n\n// undefined\nconst b = obj.b;\nb();\n\n// 2\nobj.b.apply({ a: 2 });\n\n// 1\nobj.c();\n\n// undefined\nobj.d();\nobj.d();\nobj.d.apply({ a: 2 });\n\n// undefined\nobj.e();\nobj.e();\nobj.e.call({ a: 2 });\n\n// 1\nobj.f()();\n// 1\nobj.f()();\n\n// 1\nobj.f().call({ a: 2 });\n```\n\n> 该题目来自https://bigfrontend.dev/quiz/this\n","slug":"this","published":1,"updated":"2024-04-24T12:14:21.926Z","_id":"clvdje0xx0009xzv9bdnmhywx","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>What does the code snippet to the output by <code>console.log</code></p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tc() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">d</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">e</span>: (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;)(),</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(obj.a);</span><br><span class=\"line\">\tobj.b();</span><br><span class=\"line\">\t;(obj.b)();</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst b = obj.b;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">\tobj.b.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.c();</span><br><span class=\"line\">\tobj.d();</span><br><span class=\"line\">\t;(obj.d)();</span><br><span class=\"line\">\tobj.d.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.e();</span><br><span class=\"line\">\t;(obj.e)();</span><br><span class=\"line\">\tobj.e.call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.f()();</span><br><span class=\"line\">\t;(obj.f())();</span><br><span class=\"line\">\tobj.f().call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><ul>\n<li><p><code>const b = obj.b; b(); // undefined</code></p>\n<p>lose this binding</p>\n</li>\n<li><p><code>obj.b.apply(&#123; a: 2 &#125;); </code></p>\n<p>this will be altered into <code>&#123;a:2&#125;</code>, note that the origin <code>obj.a</code> will not be<br>altered.</p>\n</li>\n<li><p><code>obj.c(); //1</code></p>\n</li>\n<li><p><code>obj.d(); // undefined</code></p>\n<p>arrow function, this is actually window</p>\n</li>\n<li><p><code>;(obj.d)(); // undefined</code></p>\n</li>\n<li><p><code>obj.d.apply(&#123; a: 2 &#125;); // undefined</code></p>\n<p>This behavior occurs because <code>obj.d</code> is an arrow function. Arrow functions do<br>not bind their own this context but inherit it from the surrounding lexical<br>context where they were defined. In this case, since <code>obj.d</code> is defined within<br>the object <code>obj</code>, the arrow function <code>d</code> retains the this value from the<br>surrounding context, which is the global object.</p>\n</li>\n<li><p><code>obj.e();</code> <code>;(obj.e)();</code> <code>obj.e.call(&#123; a: 2 &#125;);</code></p>\n<p>In the case of <code>obj.e</code>, the arrow function is created inside _ an immediately<br>invoked function expression (IIFE) _. Arrow functions inherit this from the<br>surrounding lexical context where they are defined. In this scenario, the<br>arrow function inside <code>obj.e</code> will capture the this value of the surrounding<br>context, which is the global object (typically window in a browser<br>environment).</p>\n<p>Therefore, when <code>obj.e</code> is invoked, the this keyword inside the arrow function<br>will refer to the global object, maintaining the same this reference as the<br>surrounding context where the arrow function was defined.</p>\n<p>In summary, when executing <code>obj.e</code>, the this keyword inside the arrow function<br>defined within <code>obj.e</code> will point to the global object (window in a browser<br>environment) due to the lexical scoping behavior of arrow functions.<br>immediately function, return the arrow function just as the <code>d()</code>, so this is<br>also points to the Window</p>\n</li>\n<li><p><code>obj.f()(); </code> <code>;(obj.f())();</code> <code>obj.f().call(&#123; a: 2 &#125;);</code></p>\n<p>When invoking <code>obj.f()()</code>, the this keyword inside the arrow function returned<br>by <code>obj.f() </code> will refer to the object <code>obj</code>. This behavior occurs because the<br>arrow function inherits its this value from the surrounding lexical context<br>where it was defined, which is the object <code>obj</code> in this case.</p>\n<p>Therefore, when <code>obj.f()()</code> is executed, the this keyword inside the arrow<br>function will maintain its reference to the object <code>obj</code>, as it inherits the<br>this value from the lexical scope in which it was created.</p>\n<p>In summary, when calling <code>obj.f()()</code>, the this keyword inside the arrow<br>function returned by <code>obj.f()</code> will point to the object obj.</p>\n</li>\n</ul>\n<h2 id=\"The-result\"><a href=\"#The-result\" class=\"headerlink\" title=\"The result\"></a>The result</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = obj.<span class=\"property\">b</span>;</span><br><span class=\"line\"><span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">c</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"property\">d</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"property\">e</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>().<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/quiz/this\">https://bigfrontend.dev/quiz/this</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>What does the code snippet to the output by <code>console.log</code></p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tc() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">d</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">e</span>: (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;)(),</span><br><span class=\"line\">\t<span class=\"attr\">f</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(this.a);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.<span class=\"built_in\">log</span>(obj.a);</span><br><span class=\"line\">\tobj.b();</span><br><span class=\"line\">\t;(obj.b)();</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst b = obj.b;</span><br><span class=\"line\">\tb();</span><br><span class=\"line\">\tobj.b.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.c();</span><br><span class=\"line\">\tobj.d();</span><br><span class=\"line\">\t;(obj.d)();</span><br><span class=\"line\">\tobj.d.apply(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.e();</span><br><span class=\"line\">\t;(obj.e)();</span><br><span class=\"line\">\tobj.e.call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\">\tobj.f()();</span><br><span class=\"line\">\t;(obj.f())();</span><br><span class=\"line\">\tobj.f().call(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><ul>\n<li><p><code>const b = obj.b; b(); // undefined</code></p>\n<p>lose this binding</p>\n</li>\n<li><p><code>obj.b.apply(&#123; a: 2 &#125;); </code></p>\n<p>this will be altered into <code>&#123;a:2&#125;</code>, note that the origin <code>obj.a</code> will not be<br>altered.</p>\n</li>\n<li><p><code>obj.c(); //1</code></p>\n</li>\n<li><p><code>obj.d(); // undefined</code></p>\n<p>arrow function, this is actually window</p>\n</li>\n<li><p><code>;(obj.d)(); // undefined</code></p>\n</li>\n<li><p><code>obj.d.apply(&#123; a: 2 &#125;); // undefined</code></p>\n<p>This behavior occurs because <code>obj.d</code> is an arrow function. Arrow functions do<br>not bind their own this context but inherit it from the surrounding lexical<br>context where they were defined. In this case, since <code>obj.d</code> is defined within<br>the object <code>obj</code>, the arrow function <code>d</code> retains the this value from the<br>surrounding context, which is the global object.</p>\n</li>\n<li><p><code>obj.e();</code> <code>;(obj.e)();</code> <code>obj.e.call(&#123; a: 2 &#125;);</code></p>\n<p>In the case of <code>obj.e</code>, the arrow function is created inside _ an immediately<br>invoked function expression (IIFE) _. Arrow functions inherit this from the<br>surrounding lexical context where they are defined. In this scenario, the<br>arrow function inside <code>obj.e</code> will capture the this value of the surrounding<br>context, which is the global object (typically window in a browser<br>environment).</p>\n<p>Therefore, when <code>obj.e</code> is invoked, the this keyword inside the arrow function<br>will refer to the global object, maintaining the same this reference as the<br>surrounding context where the arrow function was defined.</p>\n<p>In summary, when executing <code>obj.e</code>, the this keyword inside the arrow function<br>defined within <code>obj.e</code> will point to the global object (window in a browser<br>environment) due to the lexical scoping behavior of arrow functions.<br>immediately function, return the arrow function just as the <code>d()</code>, so this is<br>also points to the Window</p>\n</li>\n<li><p><code>obj.f()(); </code> <code>;(obj.f())();</code> <code>obj.f().call(&#123; a: 2 &#125;);</code></p>\n<p>When invoking <code>obj.f()()</code>, the this keyword inside the arrow function returned<br>by <code>obj.f() </code> will refer to the object <code>obj</code>. This behavior occurs because the<br>arrow function inherits its this value from the surrounding lexical context<br>where it was defined, which is the object <code>obj</code> in this case.</p>\n<p>Therefore, when <code>obj.f()()</code> is executed, the this keyword inside the arrow<br>function will maintain its reference to the object <code>obj</code>, as it inherits the<br>this value from the lexical scope in which it was created.</p>\n<p>In summary, when calling <code>obj.f()()</code>, the this keyword inside the arrow<br>function returned by <code>obj.f()</code> will point to the object obj.</p>\n</li>\n</ul>\n<h2 id=\"The-result\"><a href=\"#The-result\" class=\"headerlink\" title=\"The result\"></a>The result</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = obj.<span class=\"property\">b</span>;</span><br><span class=\"line\"><span class=\"title function_\">b</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">c</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">d</span>();</span><br><span class=\"line\">obj.<span class=\"property\">d</span>.<span class=\"title function_\">apply</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">e</span>();</span><br><span class=\"line\">obj.<span class=\"property\">e</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>()();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"title function_\">f</span>().<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">2</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/quiz/this\">https://bigfrontend.dev/quiz/this</a></p>\n</blockquote>\n"},{"title":"Promise","date":"2024-04-24T12:10:44.000Z","_content":"\n## The Definition of Promises:\n\nIn JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is a proxy for a value that may not be known when the Promise is created. Promises allow you to associate handlers with an asynchronous action's eventual success value or failure reason. This enables asynchronous methods to return values similar to synchronous methods by returning a Promise to supply the value at some point in the future.\n\nA Promise can be in one of three states:\n\n1. **Pending**: The initial state when the Promise is neither fulfilled nor rejected.\n2. **Fulfilled**: Indicates that the operation was completed successfully.\n3. **Rejected**: Indicates that the operation failed.\n\nWhen a Promise is settled, it means it is either fulfilled or rejected, but not pending. The term \"resolved\" is also used with Promises, indicating that the Promise is settled or \"locked-in\" to match the eventual state of another Promise. Once a Promise is resolved, further resolving or rejecting it has no effect.\n\nPromises in JavaScript are commonly used for handling asynchronous operations in a more structured and manageable way. They provide a mechanism for handling the results of asynchronous tasks, allowing developers to write cleaner and more maintainable asynchronous code. Promises can be chained together using methods like `then()`, `catch()`, and `finally()` to handle the success and failure of asynchronous operations in a sequential manner.\n\n## Promise.all() VS Promise.race()\n\nPromise. all multiple Promise the instance is packaged as a new Promise instance. At the same time, the return values of success and failure are different. The return values of success are **an array of results** , and returns when it fails **the value of the first rejected failure state.** \n\nIn Promise.all, an array is passed in, and an array is returned. The values returned by the input promise objects are arranged in the array in order. However, note that the order in which they are executed is not in order unless the iterable objects are empty. \n\nNote that the order of data in the array of successful results obtained by Promise.all is the same as that received by Promise.all. In this case, when multiple requests are sent and data is obtained and used according to the request order, Promise.all can be used to solve the problem.\n\n**（2）Promise.race**\nAs the name implies, Promse.race means a race, which means that if any result in Promise.race([p1, p2, p3]) gets faster, the result is returned, regardless of whether the result itself is successful or failed. When you want to do something, how long will it take to stop doing it? You can use this method to solve it:\n\n```js\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{\n  \n})\n```\n\n## The Problem It Sloves\n\nIn my work, I often encounter such A requirement. For example, after I use ajax to send A request A, I get the data after success, and I need to pass the data to the request B; Then I need to write the following code:\n\n```js\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\n  fs.readFile(data,'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data)\n    })\n  })\n})\n```\n\nThe preceding code has the following disadvantages:\n\n- the latter request depends on the data passing down after the previous request is successful, which causes multiple ajax requests to be nested and the code is not intuitive enough. \n- if the first and second requests do not need to pass parameters, the next request needs to be executed after the previous request succeeds. In this case, the code needs to be written as above, resulting in insufficient intuitive code.\n\n`Promise` after it appears, the code becomes as follows:\n\n```js\nlet fs = require('fs')\nfunction read(url){\n  return new Promise((resolve,reject)=>{\n    fs.readFile(url,'utf8',function(error,data){\n      error && reject(error)\n      resolve(data)\n    })\n  })\n}\nread('./a.txt').then(data=>{\n  return read(data) \n}).then(data=>{\n  return read(data)  \n}).then(data=>{\n  console.log(data)\n})\n```\n\nIn this way, the code looks much simpler and solves the problem of Hell callback.\n","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2024-04-24 20:10:44\ntags:\n  - js\n  - promise\n---\n\n## The Definition of Promises:\n\nIn JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is a proxy for a value that may not be known when the Promise is created. Promises allow you to associate handlers with an asynchronous action's eventual success value or failure reason. This enables asynchronous methods to return values similar to synchronous methods by returning a Promise to supply the value at some point in the future.\n\nA Promise can be in one of three states:\n\n1. **Pending**: The initial state when the Promise is neither fulfilled nor rejected.\n2. **Fulfilled**: Indicates that the operation was completed successfully.\n3. **Rejected**: Indicates that the operation failed.\n\nWhen a Promise is settled, it means it is either fulfilled or rejected, but not pending. The term \"resolved\" is also used with Promises, indicating that the Promise is settled or \"locked-in\" to match the eventual state of another Promise. Once a Promise is resolved, further resolving or rejecting it has no effect.\n\nPromises in JavaScript are commonly used for handling asynchronous operations in a more structured and manageable way. They provide a mechanism for handling the results of asynchronous tasks, allowing developers to write cleaner and more maintainable asynchronous code. Promises can be chained together using methods like `then()`, `catch()`, and `finally()` to handle the success and failure of asynchronous operations in a sequential manner.\n\n## Promise.all() VS Promise.race()\n\nPromise. all multiple Promise the instance is packaged as a new Promise instance. At the same time, the return values of success and failure are different. The return values of success are **an array of results** , and returns when it fails **the value of the first rejected failure state.** \n\nIn Promise.all, an array is passed in, and an array is returned. The values returned by the input promise objects are arranged in the array in order. However, note that the order in which they are executed is not in order unless the iterable objects are empty. \n\nNote that the order of data in the array of successful results obtained by Promise.all is the same as that received by Promise.all. In this case, when multiple requests are sent and data is obtained and used according to the request order, Promise.all can be used to solve the problem.\n\n**（2）Promise.race**\nAs the name implies, Promse.race means a race, which means that if any result in Promise.race([p1, p2, p3]) gets faster, the result is returned, regardless of whether the result itself is successful or failed. When you want to do something, how long will it take to stop doing it? You can use this method to solve it:\n\n```js\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{\n  \n})\n```\n\n## The Problem It Sloves\n\nIn my work, I often encounter such A requirement. For example, after I use ajax to send A request A, I get the data after success, and I need to pass the data to the request B; Then I need to write the following code:\n\n```js\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\n  fs.readFile(data,'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data)\n    })\n  })\n})\n```\n\nThe preceding code has the following disadvantages:\n\n- the latter request depends on the data passing down after the previous request is successful, which causes multiple ajax requests to be nested and the code is not intuitive enough. \n- if the first and second requests do not need to pass parameters, the next request needs to be executed after the previous request succeeds. In this case, the code needs to be written as above, resulting in insufficient intuitive code.\n\n`Promise` after it appears, the code becomes as follows:\n\n```js\nlet fs = require('fs')\nfunction read(url){\n  return new Promise((resolve,reject)=>{\n    fs.readFile(url,'utf8',function(error,data){\n      error && reject(error)\n      resolve(data)\n    })\n  })\n}\nread('./a.txt').then(data=>{\n  return read(data) \n}).then(data=>{\n  return read(data)  \n}).then(data=>{\n  console.log(data)\n})\n```\n\nIn this way, the code looks much simpler and solves the problem of Hell callback.\n","slug":"Promise","published":1,"updated":"2024-04-24T12:29:02.713Z","_id":"clvdrwxoc0000vmv9ezel9xeh","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"The-Definition-of-Promises\"><a href=\"#The-Definition-of-Promises\" class=\"headerlink\" title=\"The Definition of Promises:\"></a>The Definition of Promises:</h2><p>In JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is a proxy for a value that may not be known when the Promise is created. Promises allow you to associate handlers with an asynchronous action’s eventual success value or failure reason. This enables asynchronous methods to return values similar to synchronous methods by returning a Promise to supply the value at some point in the future.</p>\n<p>A Promise can be in one of three states:</p>\n<ol>\n<li><strong>Pending</strong>: The initial state when the Promise is neither fulfilled nor rejected.</li>\n<li><strong>Fulfilled</strong>: Indicates that the operation was completed successfully.</li>\n<li><strong>Rejected</strong>: Indicates that the operation failed.</li>\n</ol>\n<p>When a Promise is settled, it means it is either fulfilled or rejected, but not pending. The term “resolved” is also used with Promises, indicating that the Promise is settled or “locked-in” to match the eventual state of another Promise. Once a Promise is resolved, further resolving or rejecting it has no effect.</p>\n<p>Promises in JavaScript are commonly used for handling asynchronous operations in a more structured and manageable way. They provide a mechanism for handling the results of asynchronous tasks, allowing developers to write cleaner and more maintainable asynchronous code. Promises can be chained together using methods like <code>then()</code>, <code>catch()</code>, and <code>finally()</code> to handle the success and failure of asynchronous operations in a sequential manner.</p>\n<h2 id=\"Promise-all-VS-Promise-race\"><a href=\"#Promise-all-VS-Promise-race\" class=\"headerlink\" title=\"Promise.all() VS Promise.race()\"></a>Promise.all() VS Promise.race()</h2><p>Promise. all multiple Promise the instance is packaged as a new Promise instance. At the same time, the return values of success and failure are different. The return values of success are <strong>an array of results</strong> , and returns when it fails <strong>the value of the first rejected failure state.</strong> </p>\n<p>In Promise.all, an array is passed in, and an array is returned. The values returned by the input promise objects are arranged in the array in order. However, note that the order in which they are executed is not in order unless the iterable objects are empty. </p>\n<p>Note that the order of data in the array of successful results obtained by Promise.all is the same as that received by Promise.all. In this case, when multiple requests are sent and data is obtained and used according to the request order, Promise.all can be used to solve the problem.</p>\n<p><strong>（2）Promise.race</strong><br>As the name implies, Promse.race means a race, which means that if any result in Promise.race([p1, p2, p3]) gets faster, the result is returned, regardless of whether the result itself is successful or failed. When you want to do something, how long will it take to stop doing it? You can use this method to solve it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1,<span class=\"title function_\">timeOutPromise</span>(<span class=\"number\">5000</span>)]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Problem-It-Sloves\"><a href=\"#The-Problem-It-Sloves\" class=\"headerlink\" title=\"The Problem It Sloves\"></a>The Problem It Sloves</h2><p>In my work, I often encounter such A requirement. For example, after I use ajax to send A request A, I get the data after success, and I need to pass the data to the request B; Then I need to write the following code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>The preceding code has the following disadvantages:</p>\n<ul>\n<li>the latter request depends on the data passing down after the previous request is successful, which causes multiple ajax requests to be nested and the code is not intuitive enough. </li>\n<li>if the first and second requests do not need to pass parameters, the next request needs to be executed after the previous request succeeds. In this case, the code needs to be written as above, resulting in insufficient intuitive code.</li>\n</ul>\n<p><code>Promise</code> after it appears, the code becomes as follows:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">url</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(url,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">error,data</span>)&#123;</span><br><span class=\"line\">      error &amp;&amp; <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">read</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data)  </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>In this way, the code looks much simpler and solves the problem of Hell callback.</p>\n","excerpt":"","more":"<h2 id=\"The-Definition-of-Promises\"><a href=\"#The-Definition-of-Promises\" class=\"headerlink\" title=\"The Definition of Promises:\"></a>The Definition of Promises:</h2><p>In JavaScript, a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It is a proxy for a value that may not be known when the Promise is created. Promises allow you to associate handlers with an asynchronous action’s eventual success value or failure reason. This enables asynchronous methods to return values similar to synchronous methods by returning a Promise to supply the value at some point in the future.</p>\n<p>A Promise can be in one of three states:</p>\n<ol>\n<li><strong>Pending</strong>: The initial state when the Promise is neither fulfilled nor rejected.</li>\n<li><strong>Fulfilled</strong>: Indicates that the operation was completed successfully.</li>\n<li><strong>Rejected</strong>: Indicates that the operation failed.</li>\n</ol>\n<p>When a Promise is settled, it means it is either fulfilled or rejected, but not pending. The term “resolved” is also used with Promises, indicating that the Promise is settled or “locked-in” to match the eventual state of another Promise. Once a Promise is resolved, further resolving or rejecting it has no effect.</p>\n<p>Promises in JavaScript are commonly used for handling asynchronous operations in a more structured and manageable way. They provide a mechanism for handling the results of asynchronous tasks, allowing developers to write cleaner and more maintainable asynchronous code. Promises can be chained together using methods like <code>then()</code>, <code>catch()</code>, and <code>finally()</code> to handle the success and failure of asynchronous operations in a sequential manner.</p>\n<h2 id=\"Promise-all-VS-Promise-race\"><a href=\"#Promise-all-VS-Promise-race\" class=\"headerlink\" title=\"Promise.all() VS Promise.race()\"></a>Promise.all() VS Promise.race()</h2><p>Promise. all multiple Promise the instance is packaged as a new Promise instance. At the same time, the return values of success and failure are different. The return values of success are <strong>an array of results</strong> , and returns when it fails <strong>the value of the first rejected failure state.</strong> </p>\n<p>In Promise.all, an array is passed in, and an array is returned. The values returned by the input promise objects are arranged in the array in order. However, note that the order in which they are executed is not in order unless the iterable objects are empty. </p>\n<p>Note that the order of data in the array of successful results obtained by Promise.all is the same as that received by Promise.all. In this case, when multiple requests are sent and data is obtained and used according to the request order, Promise.all can be used to solve the problem.</p>\n<p><strong>（2）Promise.race</strong><br>As the name implies, Promse.race means a race, which means that if any result in Promise.race([p1, p2, p3]) gets faster, the result is returned, regardless of whether the result itself is successful or failed. When you want to do something, how long will it take to stop doing it? You can use this method to solve it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([promise1,<span class=\"title function_\">timeOutPromise</span>(<span class=\"number\">5000</span>)]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Problem-It-Sloves\"><a href=\"#The-Problem-It-Sloves\" class=\"headerlink\" title=\"The Problem It Sloves\"></a>The Problem It Sloves</h2><p>In my work, I often encounter such A requirement. For example, after I use ajax to send A request A, I get the data after success, and I need to pass the data to the request B; Then I need to write the following code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(data,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>The preceding code has the following disadvantages:</p>\n<ul>\n<li>the latter request depends on the data passing down after the previous request is successful, which causes multiple ajax requests to be nested and the code is not intuitive enough. </li>\n<li>if the first and second requests do not need to pass parameters, the next request needs to be executed after the previous request succeeds. In this case, the code needs to be written as above, resulting in insufficient intuitive code.</li>\n</ul>\n<p><code>Promise</code> after it appears, the code becomes as follows:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">read</span>(<span class=\"params\">url</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    fs.<span class=\"title function_\">readFile</span>(url,<span class=\"string\">&#x27;utf8&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">error,data</span>)&#123;</span><br><span class=\"line\">      error &amp;&amp; <span class=\"title function_\">reject</span>(error)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">read</span>(<span class=\"string\">&#x27;./a.txt&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data) </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">read</span>(data)  </span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>In this way, the code looks much simpler and solves the problem of Hell callback.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clvdrwxoc0000vmv9ezel9xeh","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvdrx8340003vmv90freb1ea"},{"post_id":"clvdrwxoc0000vmv9ezel9xeh","tag_id":"clvdrxavu0004vmv9cnja9zx5","_id":"clvdrxavv0005vmv94e610bg1"},{"post_id":"clvdje0xq0001xzv948weegqk","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvdrzbu60003gpv96n9052mu"},{"post_id":"clvdje0xq0001xzv948weegqk","tag_id":"clvdrzd0d0005gpv91694fopg","_id":"clvdrzd0e0006gpv9bs361i1v"},{"post_id":"clvdje0xq0001xzv948weegqk","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds04ax000rgpv94ncf9n03"},{"post_id":"clvdje0xu0004xzv94rr83wg1","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds0phd0000nkv96s2gaw16"},{"post_id":"clvdje0xu0004xzv94rr83wg1","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds0phe0002nkv9gtqah6bc"},{"post_id":"clvdje0xv0005xzv91qa93lq8","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds0yeo0003nkv99kuoekqg"},{"post_id":"clvdje0xv0005xzv91qa93lq8","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds0yeo0004nkv9ccoz7n5c"},{"post_id":"clvdje0xs0002xzv92qbn4gmg","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds145x0005nkv9b2et97wq"},{"post_id":"clvdje0xs0002xzv92qbn4gmg","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds145y0006nkv91eq5go6i"},{"post_id":"clvdje0xv0006xzv9apuc48nd","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds18rc0007nkv980wt4mc5"},{"post_id":"clvdje0xv0006xzv9apuc48nd","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds18rc0008nkv900q28zkn"},{"post_id":"clvdje0xx0009xzv9bdnmhywx","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds1iv50009nkv98ujfb2pv"},{"post_id":"clvdje0xx0009xzv9bdnmhywx","tag_id":"clvds1l1f000bnkv91hr80uu3","_id":"clvds1l1f000cnkv9cxj637we"},{"post_id":"clvdje0xw0008xzv9d216hpmt","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds1pph000dnkv9ed8yctts"},{"post_id":"clvdje0xw0008xzv9d216hpmt","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds1pph000enkv95grhcpjy"},{"post_id":"clvdje0xl0000xzv9fhpj9ked","tag_id":"clvdrx5wy0001vmv9a1209nli","_id":"clvds1tx9000fnkv91eiv84f9"},{"post_id":"clvdje0xl0000xzv9fhpj9ked","tag_id":"clvds04aw000qgpv96olv0vyw","_id":"clvds1vc0000inkv91j7k0ord"},{"post_id":"clvdje0xl0000xzv9fhpj9ked","tag_id":"clvds20b9000lnkv9fd5sd9y5","_id":"clvds20b9000mnkv981ckhw64"}],"Tag":[{"name":"js、array","_id":"clvdje0xs0003xzv985ofgs3c"},{"name":"js","_id":"clvdrx5wy0001vmv9a1209nli"},{"name":"promise","_id":"clvdrxavu0004vmv9cnja9zx5"},{"name":"-js、array","_id":"clvdry70w0006vmv92cjj1jjc"},{"name":"-jsarray","_id":"clvdry9eu0008vmv94n0ka1p4"},{"name":"-js-array","_id":"clvdrya6r000avmv9fur9eeav"},{"name":"-js -array","_id":"clvdryayy000cvmv9hva3b170"},{"name":"-js -array - a","_id":"clvdryg64000evmv98gp6dtu7"},{"name":"-js -array -","_id":"clvdryh6h000gvmv9b0o6a28u"},{"name":"js -array -","_id":"clvdrz9qo0000gpv96phs1uk0"},{"name":"array -","_id":"clvdrzbu50002gpv9edy4ddfp"},{"name":"array","_id":"clvdrzd0d0005gpv91694fopg"},{"name":"al","_id":"clvdrzff10007gpv9g5spb8h0"},{"name":"alg","_id":"clvdrzgfj0009gpv914khf420"},{"name":"algo","_id":"clvdrzhd7000bgpv9en24aoxb"},{"name":"algot","_id":"clvdrzk5s000fgpv9303gan8u"},{"name":"algorithem","_id":"clvdrzm3m000igpv934wl39ml"},{"name":"algorithn","_id":"clvds02cz000kgpv9cwut01mx"},{"name":"algorith","_id":"clvds02tp000mgpv9fvfo0wtb"},{"name":"algorithm s","_id":"clvds03oj000ogpv93f548j7z"},{"name":"algorithm","_id":"clvds04aw000qgpv96olv0vyw"},{"name":"this","_id":"clvds1l1f000bnkv91hr80uu3"},{"name":"D","_id":"clvds1xqv000jnkv9870zce8d"},{"name":"tree","_id":"clvds20b9000lnkv9fd5sd9y5"}]}}