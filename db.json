{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/categories.styl","path":"css/components/categories.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Hacker/source/css/components/tags.styl","path":"css/components/tags.styl","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/404.css","path":"css/404.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/a11y-dark.min.css","path":"css/a11y-dark.min.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/boxicons.min.css","path":"css/boxicons.min.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/fonts.css","path":"css/fonts.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/markdown.css","path":"css/markdown.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/reset.css","path":"css/reset.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600.woff","path":"fonts/montserrat-v23-latin-600.woff","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600.woff2","path":"fonts/montserrat-v23-latin-600.woff2","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600italic.woff","path":"fonts/montserrat-v23-latin-600italic.woff","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600italic.woff2","path":"fonts/montserrat-v23-latin-600italic.woff2","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-italic.woff","path":"fonts/montserrat-v23-latin-italic.woff","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-italic.woff2","path":"fonts/montserrat-v23-latin-italic.woff2","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-regular.woff","path":"fonts/montserrat-v23-latin-regular.woff","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-regular.woff2","path":"fonts/montserrat-v23-latin-regular.woff2","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/img/apple-touch-icon.png","path":"img/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/img/ghost-img.png","path":"img/ghost-img.png","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/img/screenshot.png","path":"img/screenshot.png","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/js/highlightjs-line-numbers.js","path":"js/highlightjs-line-numbers.js","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/ZenMind/source/js/scrollreveal.min.js","path":"js/scrollreveal.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1712458573277},{"_id":"themes/Hacker/CHANGELOG.md","hash":"5ee7ae48cc5308758894eb961caaef89ecc04048","modified":1662453582000},{"_id":"themes/Hacker/.gitignore","hash":"c57cf4e0d24c5db09716f924a45ad879650f7548","modified":1662453582000},{"_id":"themes/Hacker/README.md","hash":"18d28d5466f58f275e0aec504748bbe50f4c62f5","modified":1662453582000},{"_id":"themes/Hacker/LICENSE","hash":"3127907a7623734f830e8c69ccee03b693bf993e","modified":1662453582000},{"_id":"themes/Hacker/_config.example.yml","hash":"eed5b26f970fcc5dd978104a6621e2664e50325a","modified":1662453582000},{"_id":"themes/Hacker/README_zh-CN.md","hash":"4fb25729cfb2e6a5727977dd9c2cdb566f839ac1","modified":1662453582000},{"_id":"themes/Hacker/languages/default.yml","hash":"d4466fb0a6102e50777ee56957f78de696891a0e","modified":1662453582000},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"d822b531c8e0edd5e1ae85ac3de96017e4781b3f","modified":1662453582000},{"_id":"themes/Hacker/CHANGELOG_zh-CN.md","hash":"5055c0a138469e673b3136c60033c5ae30a32787","modified":1662453582000},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1662453582000},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1662453582000},{"_id":"themes/Hacker/layout/categories.ejs","hash":"bfad4e7eade650c535f0194974e2646619657b8b","modified":1662453582000},{"_id":"themes/Hacker/layout/layout.ejs","hash":"1bd1ff49fb17548b934e0664ba6cefd60b086fa9","modified":1662453582000},{"_id":"themes/Hacker/layout/tags.ejs","hash":"ee89e6a9c14bdb5e5e8cf975a558c780fe8dabff","modified":1662453582000},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"1f79ebaf52b8229cf5c58bb8325cf0177859a05c","modified":1662453582000},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"06dd5da86efddecedd26a998fa66c53c580867f0","modified":1662453582000},{"_id":"themes/Hacker/layout/components/baiduanalytics.ejs","hash":"75ea315908beaf390265e00167cf8a30b5d0d94a","modified":1662453582000},{"_id":"themes/Hacker/layout/components/categories.ejs","hash":"3665bf5d1c7181db22dc1c48d62ebf42757d8c27","modified":1662453582000},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"538795f4af3a98e824aefc4b68a1bcd210c091e9","modified":1662453582000},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"27e6906523eae89fed4a6e86ebb2ad614a25c647","modified":1662453582000},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1662453582000},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"929a8eafa278d49c2f41d3581e2608eca80d7856","modified":1662453582000},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1662453582000},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"3ebb7790a46587297966f200fb4fcdbba25269df","modified":1662453582000},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1662453582000},{"_id":"themes/Hacker/source/css/style.styl","hash":"208e5f6d010e4e2c5590dae5e4fca8de592d3ef1","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"f613fc6ed4dec8171bf7a03bd8878eaa995082bb","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/categories.styl","hash":"c67e20d60351295cb178b568af42d430f4bcc3e6","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"80ef890252d31d3bbfe71740fdcfc54ae14cad8e","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"fa5e6d715d288a327406df78225284c70530cb98","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"9c6e6bc00f377666f6815bc5e23438893357f8f6","modified":1662453582000},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"d1fffabbca58cbeb0ff33855fd1b7ea6079e82b3","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"1cec6cb1835f99432cc5c6ba674782237fea4f95","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"8c0d919322194dc295e5404bcd68949f962f88dc","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/tags.styl","hash":"684cf4eb4b8671476365e955dceebf096cc0e6ed","modified":1662453582000},{"_id":"public/2024/04/07/hello-world/index.html","hash":"8ae36fd8ed8848ee5a59ec05ebabbea9e415262f","modified":1712478000641},{"_id":"public/index.html","hash":"fee61f7f70eceaf3150c136ad66e805b911e0c05","modified":1712647902231},{"_id":"public/archives/index.html","hash":"0cd3e123b81860a5e2eabc62c33b594dcb7c8094","modified":1712647902231},{"_id":"public/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1712477399085},{"_id":"public/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1712477399085},{"_id":"public/css/components/archive.css","hash":"cea7d6edd8221c00602a799e67046365b2ad929e","modified":1712477399085},{"_id":"public/css/components/article.css","hash":"3a1316dbf86a4f52cf8da789f3a13e94504dee76","modified":1712477399085},{"_id":"public/css/components/categories.css","hash":"f181d27640f1408f032c5386836c4c2322724f8d","modified":1712477399085},{"_id":"public/css/components/footer.css","hash":"602def895fd52f288b6e93932284aa2e52b7fee0","modified":1712477399085},{"_id":"public/css/components/header.css","hash":"51f8a4c736f3b180a7c4c8f804d8060031df6a34","modified":1712477399085},{"_id":"public/css/components/layout.css","hash":"3a69e925524b60c8283cdef80a4b0fd2257efe1e","modified":1712477787465},{"_id":"public/css/components/icon.css","hash":"cdaf1a152184ff7def760f14095e4a2fa16cd6bd","modified":1712477399085},{"_id":"public/css/components/pagination.css","hash":"88f7519c0c8ff96b436413528d5f568a4f3d2177","modified":1712477399085},{"_id":"public/css/components/responsive.css","hash":"216eb94fc69007de995fc8d382670ba00a9574e8","modified":1712477399085},{"_id":"public/css/components/syntax.css","hash":"80de949e0928eb18957f63e7435877085ca626fb","modified":1712477399085},{"_id":"public/css/components/tags.css","hash":"1566e94c23ae19dbfc7d2cf433e68242ed657dea","modified":1712477399085},{"_id":"public/css/style.css","hash":"ef68797683c695c483aec4d3e2757ea3c0130ae6","modified":1712477787465},{"_id":"themes/ZenMind/LICENSE.txt","hash":"4b1829044a6d453d26a6759272398e85574d9b8b","modified":1712463912791},{"_id":"themes/ZenMind/_config.yml","hash":"839641922b8d7e3b3a7d6030e9d06f123f048b2b","modified":1712481995374},{"_id":"themes/ZenMind/README.md","hash":"c6aea279c1fe4e4c08ce6b749b816d4012f18444","modified":1712463912791},{"_id":"themes/ZenMind/layout/index.ejs","hash":"1ab98f0330092a43eb0b118026c61dbdc24bef3a","modified":1712463912793},{"_id":"themes/ZenMind/source/404.html","hash":"d6f8b9f7e0eb3b489fdf74092f1e65653c5fc83a","modified":1712463912794},{"_id":"themes/ZenMind/layout/archive.ejs","hash":"ff0d592a498756894f9ca969f1f2f57135c58adc","modified":1712463912793},{"_id":"themes/ZenMind/layout/layout.ejs","hash":"68d1bb31fccbe9810b9c8a6cd54b53938e0318a2","modified":1712463912794},{"_id":"themes/ZenMind/layout/_partial/head.ejs","hash":"626d5bf74aa0a54a97f613b80249d795342b1a56","modified":1712463912792},{"_id":"themes/ZenMind/layout/_partial/header.ejs","hash":"30d9e9bad9d0742112252062a8770734cf5d2d88","modified":1712463912792},{"_id":"themes/ZenMind/layout/_partial/post-header.ejs","hash":"f8b8ece9f45aeea739091df939f68e10ea41a0d8","modified":1712463912793},{"_id":"themes/ZenMind/layout/post.ejs","hash":"2b14a81dddc58ae70c043bf73995602b886ecc3c","modified":1712463912794},{"_id":"themes/ZenMind/source/css/404.css","hash":"9c1b0ab3b16a4b9fd13aa61721e009fad6d8248a","modified":1712463912795},{"_id":"themes/ZenMind/layout/_partial/footer.ejs","hash":"e0a67f546f0e49069a1c8e5396c53687a22fc491","modified":1712463997127},{"_id":"themes/ZenMind/source/css/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1712463912795},{"_id":"themes/ZenMind/layout/_partial/paginator.ejs","hash":"980bf0a0be798c19df4b0827aa4b90b35c872425","modified":1712463912792},{"_id":"themes/ZenMind/source/css/fonts.css","hash":"bd6171c8de8d9f4efafca3802c4d20099d7fca1c","modified":1712463912796},{"_id":"themes/ZenMind/source/css/markdown.css","hash":"22a6650fcfffe7ebdad61a761a68fe4083bd411e","modified":1712463912796},{"_id":"themes/ZenMind/source/css/reset.css","hash":"f6184d3f74dc704f077ca4e0b91003652a9db978","modified":1712463912797},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600italic.woff","hash":"c0e80c18fac1cd10469c4f922ad92e81fc8b3b94","modified":1712463912799},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600.woff2","hash":"2fe30978041c41a2994ac0fd491e83d32a3203b7","modified":1712463912798},{"_id":"themes/ZenMind/source/css/style.css","hash":"ef68797683c695c483aec4d3e2757ea3c0130ae6","modified":1712463912797},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600italic.woff2","hash":"1f24e9edcccd42d4694a4020d6a8f9b9cb28f471","modified":1712463912799},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-italic.woff","hash":"fca5ee87a17c57eb53265da1c2c75db7305ad69c","modified":1712463912800},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-italic.woff2","hash":"ce1eae3f714702a82c1e9c05b5ba302a9e91ac20","modified":1712463912800},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-regular.woff","hash":"285adda1da1fc15583ad53160d66032aeccb45ea","modified":1712463912801},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-regular.woff2","hash":"f7eefafb7bfdc6b5572714fa267268b845a67cf4","modified":1712463912802},{"_id":"themes/ZenMind/source/fonts/montserrat-v23-latin-600.woff","hash":"925d9f095488dc77dd84e8414422f0113f4628a9","modified":1712463912798},{"_id":"themes/ZenMind/source/img/favicon.ico","hash":"633d48fcf33afcc23c92741cb8d7fb319f84605a","modified":1712463912802},{"_id":"themes/ZenMind/source/img/logo.svg","hash":"4f6320363ca27df3c23338d1eb53dcb8d79250b6","modified":1712463912805},{"_id":"themes/ZenMind/source/js/highlightjs-line-numbers.js","hash":"690e96133591495fa847d828573bd0576b2d168a","modified":1712463912810},{"_id":"themes/ZenMind/source/js/main.js","hash":"5e20f6881c6982748d3239e1edac8822636ef622","modified":1712463912811},{"_id":"themes/ZenMind/source/img/apple-touch-icon.png","hash":"e5763584d9fa198aff8161486bf52e3d167b9218","modified":1712463912802},{"_id":"themes/ZenMind/source/js/scrollreveal.min.js","hash":"62ec7b2c98d807c1e579da3b2bd9be51a45b9ee3","modified":1712463912811},{"_id":"themes/ZenMind/source/css/boxicons.min.css","hash":"b2df125458560b44161c8375883713eb3ae91305","modified":1712463912796},{"_id":"themes/ZenMind/source/js/highlight.min.js","hash":"d264ad16bdf39cfec2b06c20223b87fcb37ad27b","modified":1712463912810},{"_id":"themes/ZenMind/source/img/screenshot.png","hash":"0225d87fb0d7db5af2a14407839ae64685c08309","modified":1712463912808},{"_id":"themes/ZenMind/source/img/ghost-img.png","hash":"1dd9e6e6191b50029fc2bb64eb4fc7365c4c4816","modified":1712463912805},{"_id":"public/fonts/montserrat-v23-latin-600italic.woff","hash":"c0e80c18fac1cd10469c4f922ad92e81fc8b3b94","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-600.woff2","hash":"2fe30978041c41a2994ac0fd491e83d32a3203b7","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-italic.woff2","hash":"ce1eae3f714702a82c1e9c05b5ba302a9e91ac20","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-600.woff","hash":"925d9f095488dc77dd84e8414422f0113f4628a9","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-italic.woff","hash":"fca5ee87a17c57eb53265da1c2c75db7305ad69c","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-regular.woff","hash":"285adda1da1fc15583ad53160d66032aeccb45ea","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-regular.woff2","hash":"f7eefafb7bfdc6b5572714fa267268b845a67cf4","modified":1712477787465},{"_id":"public/img/apple-touch-icon.png","hash":"e5763584d9fa198aff8161486bf52e3d167b9218","modified":1712477787465},{"_id":"public/img/favicon.ico","hash":"633d48fcf33afcc23c92741cb8d7fb319f84605a","modified":1712477787465},{"_id":"public/fonts/montserrat-v23-latin-600italic.woff2","hash":"1f24e9edcccd42d4694a4020d6a8f9b9cb28f471","modified":1712477787465},{"_id":"public/img/logo.svg","hash":"4f6320363ca27df3c23338d1eb53dcb8d79250b6","modified":1712477787465},{"_id":"public/404.html","hash":"d6f8b9f7e0eb3b489fdf74092f1e65653c5fc83a","modified":1712477787465},{"_id":"public/css/404.css","hash":"9c1b0ab3b16a4b9fd13aa61721e009fad6d8248a","modified":1712477787465},{"_id":"public/css/a11y-dark.min.css","hash":"e0a3294faa7dfa1eae300caea5a01f438b643b93","modified":1712477787465},{"_id":"public/css/fonts.css","hash":"bd6171c8de8d9f4efafca3802c4d20099d7fca1c","modified":1712477787465},{"_id":"public/css/markdown.css","hash":"22a6650fcfffe7ebdad61a761a68fe4083bd411e","modified":1712477787465},{"_id":"public/css/reset.css","hash":"f6184d3f74dc704f077ca4e0b91003652a9db978","modified":1712477787465},{"_id":"public/js/highlightjs-line-numbers.js","hash":"690e96133591495fa847d828573bd0576b2d168a","modified":1712477787465},{"_id":"public/js/main.js","hash":"5e20f6881c6982748d3239e1edac8822636ef622","modified":1712477787465},{"_id":"public/css/boxicons.min.css","hash":"b2df125458560b44161c8375883713eb3ae91305","modified":1712477787465},{"_id":"public/js/scrollreveal.min.js","hash":"62ec7b2c98d807c1e579da3b2bd9be51a45b9ee3","modified":1712477787465},{"_id":"public/js/highlight.min.js","hash":"d264ad16bdf39cfec2b06c20223b87fcb37ad27b","modified":1712477787465},{"_id":"public/img/screenshot.png","hash":"0225d87fb0d7db5af2a14407839ae64685c08309","modified":1712477787465},{"_id":"public/img/ghost-img.png","hash":"1dd9e6e6191b50029fc2bb64eb4fc7365c4c4816","modified":1712477787465},{"_id":"source/_posts/decode-message-1.md","hash":"5c17ee43ebeae0db49c5c745421a4ceb59557779","modified":1712477966569},{"_id":"source/_posts/decode-message.md","hash":"35e1ebfb395b2b187df60743ac7ee4ef2eeb9f6a","modified":1712482058122},{"_id":"public/2024/04/07/decode-message/index.html","hash":"5441ba56b6967e0253ea8df8d9990fe37cd41232","modified":1712500331059},{"_id":"public/2024/04/07/decode-message-1/index.html","hash":"7c9aebe4cfe3fafd6a32c2970cd58dcd433dbefe","modified":1712478000641},{"_id":"public/tags/js/index.html","hash":"a3bf7723e62569233f50e6e9ecbd8dd7fb015a63","modified":1712478000641},{"_id":"public/tags/js、array/index.html","hash":"373fc0b19d20ac4288efbce25c2572da823ffa14","modified":1712500331059},{"_id":"source/_posts/resume.md","hash":"98f328aaf81b4ad4f2de6ca27ad8af2c707a2df2","modified":1712500321857},{"_id":"source/_posts/detect-data-type.md","hash":"2cf7e5503204b124d6c4a0a373f66458898b55f4","modified":1712647959688},{"_id":"public/2024/04/07/resume/index.html","hash":"fcc281d35ddb6bafb3b5064a5f2654b196353a1c","modified":1712500331059},{"_id":"public/2024/04/07/detect-data-type/index.html","hash":"cf844505ec7d0e0b4490df9903f844a46f4a51f1","modified":1712648337132}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"decode-message","date":"2024-04-07T08:19:12.000Z","_content":"\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3\n   stop when cannot neither move down right or up right. the character on the path is the message\n   for the input above, IROCLED should be returned.\n\n**notes**\nif no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the message using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning going down).\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","source":"_posts/decode-message.md","raw":"---\ntitle: decode-message\ndate: 2024-04-07 16:19:12\ntags: js、array\n---\n\n## Problem Description\n\nYour are given a 2-D array of characters. There is a hidden message in it.\n\n```\nI B C A L K A\nD R F C A E A\nG H O E L A D\n```\n\nThe way to collect the message is as follows:\n\n1. start at top left\n2. move diagonally down right\n3. when cannot move any more, try to switch to diagonally up right\n4. when cannot move any more, try switch to diagonally down right, repeat 3\n   stop when cannot neither move down right or up right. the character on the path is the message\n   for the input above, IROCLED should be returned.\n\n**notes**\nif no characters could be collected, return empty string\n\n## The Solution\n\nWe'll create a function called `decode` that accepts a 2D array and decodes the message using the following approach:\n\n1. If the length of the array or message is 0, return an empty string.\n2. Loop through the columns from 0 to the last column.\n3. Keep track of the coordinates and the direction (default is positive, meaning going down).\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. When you match the end, switch the direction.\n\n## Edge Cases\n\n- If the length of the array or message is 0, return an empty string.\n- If the row is bigger than the rows or smaller than 0, change the direction.\n- If there's only one row, handle the edge case to avoid overflow.\n\n## The slove\n\n```\n/**\n * @param {string[][]} message\n * @return {string}\n */\nfunction decode(message) {\n  if(!message.length) return \"\";\n  if(!message[0].length) return \"\";\n\n  const rows = message.length;\n  const cols = message[0].length;\n\n  let result = ''\n  let row = 0\n  let col = 0\n  let directionY = 1\n  while(col < cols && row > -1 && row < rows) {\n    result += message[row][col]\n    col += 1\n    row = row + directionY\n\n    if (row > rows - 1) {\n      directionY = -1\n      row -= 2\n    } else if (row < 0) {\n      directionY = 1\n      row +=2\n    }\n  }\n  return result\n}\n\n\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","slug":"decode-message","published":1,"updated":"2024-04-07T09:27:38.122Z","_id":"clup9808u00007pgnh9ukgtil","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3<br>stop when cannot neither move down right or up right. the character on the path is the message<br>for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong><br>if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll create a function called <code>decode</code> that accepts a 2D array and decodes the message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there’s only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>Your are given a 2-D array of characters. There is a hidden message in it.</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">I</span> <span class=\"variable\">B</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"variable\">L</span> <span class=\"built_in\">K</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"built_in\">D</span> <span class=\"variable\">R</span> <span class=\"variable\">F</span> <span class=\"built_in\">C</span> <span class=\"variable\">A</span> <span class=\"built_in\">E</span> <span class=\"variable\">A</span></span><br><span class=\"line\"><span class=\"variable\">G</span> <span class=\"variable\">H</span> <span class=\"built_in\">O</span> <span class=\"built_in\">E</span> <span class=\"variable\">L</span> <span class=\"variable\">A</span> <span class=\"built_in\">D</span></span><br></pre></td></tr></table></figure>\n\n<p>The way to collect the message is as follows:</p>\n<ol>\n<li>start at top left</li>\n<li>move diagonally down right</li>\n<li>when cannot move any more, try to switch to diagonally up right</li>\n<li>when cannot move any more, try switch to diagonally down right, repeat 3<br>stop when cannot neither move down right or up right. the character on the path is the message<br>for the input above, IROCLED should be returned.</li>\n</ol>\n<p><strong>notes</strong><br>if no characters could be collected, return empty string</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll create a function called <code>decode</code> that accepts a 2D array and decodes the message using the following approach:</p>\n<ol>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>Loop through the columns from 0 to the last column.</li>\n<li>Keep track of the coordinates and the direction (default is positive, meaning going down).</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>When you match the end, switch the direction.</li>\n</ol>\n<h2 id=\"Edge-Cases\"><a href=\"#Edge-Cases\" class=\"headerlink\" title=\"Edge Cases\"></a>Edge Cases</h2><ul>\n<li>If the length of the array or message is 0, return an empty string.</li>\n<li>If the row is bigger than the rows or smaller than 0, change the direction.</li>\n<li>If there’s only one row, handle the edge case to avoid overflow.</li>\n</ul>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string[][]&#125; message</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">function decode(message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message.<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>) <span class=\"built_in\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  const rows = message.<span class=\"built_in\">length</span>;</span><br><span class=\"line\">  const cols = message[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">let</span> result = &#x27;&#x27;</span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">row</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> <span class=\"built_in\">col</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"built_in\">let</span> directionY = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">col</span> &lt; cols &amp;&amp; <span class=\"built_in\">row</span> &gt; -<span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">row</span> &lt; rows) &#123;</span><br><span class=\"line\">    result += message[<span class=\"built_in\">row</span>][<span class=\"built_in\">col</span>]</span><br><span class=\"line\">    <span class=\"built_in\">col</span> += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">row</span> = <span class=\"built_in\">row</span> + directionY</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &gt; rows - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      directionY = -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> -= <span class=\"number\">2</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">row</span> &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      directionY = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"built_in\">row</span> +=<span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"},{"title":"detect-data-type","date":"2024-04-07T09:44:30.000Z","_content":"\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in JavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data type including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the problem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","source":"_posts/detect-data-type.md","raw":"---\ntitle: detect-data-type\ndate: 2024-04-07 17:44:30\ntags:\n---\n\n## Problem Description\n\nThis is an easy problem.\n\nFor [all the basic data types](https://javascript.info/types \"null\") in JavaScript, how could you write a function to detect the type of arbitrary data?\n\nBesides basic types, you need to also handle also commonly used complex data type including `Array`, `ArrayBuffer`, `Map`, `Set`, `Date` and `Function`\n\nThe goal is not to list up all the data types but to show us how to solve the problem when we need to.\n\nThe type should be lowercase\n\n```js\ndetectType(1); // 'number'\ndetectType(new Map()); // 'map'\ndetectType([]); // 'array'\ndetectType(null); // 'null'\n\n// more in judging step\n```\n\n## The Solution\n\nWe'll use object prototype and regular expressions:\n\n1. Use `Object.prototype.toString.call(data).toLowerCase()` to get the object type as a string, such as [object string]\n2. Use the regular expressions to extract the type from the string.\n3. Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set\n4. Use a while loop to loop through from column 0 to the last column and collect the result.\n5. if the type is in the set, we return it. Or we return 'object'\n\n## The slove\n\n```javascript\n/**\n * @param {any} data\n * @return {string}\n */\nfunction detectType(data) {\n\tconst tag = Object.prototype.toString.call(data).toLowerCase();\n\tconst matches = tag.match(/^\\[object\\s(.*?)\\]/);\n\tif (matches) {\n\t\tconst type = matches[1];\n\t\tconsole.log(type);\n\t\tconst allowedTypes = new Set([\n\t\t\t\"number\",\n\t\t\t\"bigint\",\n\t\t\t\"null\",\n\t\t\t\"string\",\n\t\t\t\"boolean\",\n\t\t\t\"symbol\",\n\t\t\t\"function\",\n\t\t\t\"undefined\",\n\t\t\t\"array\",\n\t\t\t\"date\",\n\t\t\t\"map\",\n\t\t\t\"set\",\n\t\t\t\"arraybuffer\",\n\t\t]);\n\t\tif (allowedTypes.has(type)) {\n\t\t\treturn type;\n\t\t}\n\t}\n\treturn \"object\";\n}\n```\n\n> 该题目来自https://bigfrontend.dev/problem/decode-message\n","slug":"detect-data-type","published":1,"updated":"2024-04-09T07:32:39.688Z","_id":"clupmhcig000011gnck8w4tbj","comments":1,"layout":"post","photos":[],"content":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>if the type is in the set, we return it. Or we return ‘object’</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Problem-Description\"><a href=\"#Problem-Description\" class=\"headerlink\" title=\"Problem Description\"></a>Problem Description</h2><p>This is an easy problem.</p>\n<p>For <a href=\"https://javascript.info/types\" title=\"null\">all the basic data types</a> in JavaScript, how could you write a function to detect the type of arbitrary data?</p>\n<p>Besides basic types, you need to also handle also commonly used complex data type including <code>Array</code>, <code>ArrayBuffer</code>, <code>Map</code>, <code>Set</code>, <code>Date</code> and <code>Function</code></p>\n<p>The goal is not to list up all the data types but to show us how to solve the problem when we need to.</p>\n<p>The type should be lowercase</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"number\">1</span>); <span class=\"comment\">// &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()); <span class=\"comment\">// &#x27;map&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>([]); <span class=\"comment\">// &#x27;array&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">detectType</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &#x27;null&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// more in judging step</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>We’ll use object prototype and regular expressions:</p>\n<ol>\n<li>Use <code>Object.prototype.toString.call(data).toLowerCase()</code> to get the object type as a string, such as [object string]</li>\n<li>Use the regular expressions to extract the type from the string.</li>\n<li>Create a Set of allowed types [all the basic data types] and check if the extracted type is in the set</li>\n<li>Use a while loop to loop through from column 0 to the last column and collect the result.</li>\n<li>if the type is in the set, we return it. Or we return ‘object’</li>\n</ol>\n<h2 id=\"The-slove\"><a href=\"#The-slove\" class=\"headerlink\" title=\"The slove\"></a>The slove</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">detectType</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tag = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(data).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> matches = tag.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\[object\\s(.*?)\\]/</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (matches) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = matches[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(type);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> allowedTypes = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;number&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;bigint&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;null&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;string&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;boolean&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;symbol&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;function&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;undefined&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;array&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;date&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;map&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;set&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;arraybuffer&quot;</span>,</span><br><span class=\"line\">\t\t]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (allowedTypes.<span class=\"title function_\">has</span>(type)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> type;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该题目来自<a href=\"https://bigfrontend.dev/problem/decode-message\">https://bigfrontend.dev/problem/decode-message</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clup9808u00007pgnh9ukgtil","tag_id":"clup98nox00067pgn702e34ca","_id":"clup98noy00077pgn6x1we3ta"}],"Tag":[{"name":"js","_id":"clup96q8u00016ggn23cycnd5"},{"name":"js array","_id":"clup98co200027pgnbpr8gwjj"},{"name":"jsarray","_id":"clup98kfl00047pgncsal5cej"},{"name":"js、array","_id":"clup98nox00067pgn702e34ca"}]}}